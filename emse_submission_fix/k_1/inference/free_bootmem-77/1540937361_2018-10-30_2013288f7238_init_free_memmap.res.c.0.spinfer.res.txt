init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./free_bootmem-77/final_response_0.spinfer.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
expression E0, E1;
@@
- if (E0 < E1)  
+ if (E0 < E1)  
  {
- free_bootmem(E0, E1 - E0); 
+ memblock_free(E0, E1 - E0); 
  }
// Infered from: (./free_bootmem-77/1540937361_2018-10-30_2013288f7238_init_free_memmap.{c,res.c}: free_memmap), (./free_bootmem-77/1540937361_2018-10-30_2013288f7238_init_free_memmap.{c,res.c}: free_memmap)
// Recall: 1.00, Precision: 1.00, Matching recall: 1.00

// ---------------------------------------------
// Final metrics (for the combined 1 rules):
// -- Edit Location --
// Recall: 1.00, Precision: 1.00
// -- Node Change --
// Recall: 1.00, Precision: 1.00
// -- General --
// Functions fully changed: 1/1(100%)


// ---------------------------------------------

HANDLING: ./free_bootmem-77/1540937361_2018-10-30_2013288f7238_init_free_memmap.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     transformation info returned:
          transform state: 12
               with rule_elem: -if -(-E0 -< -E1-)
                                 >>> if (E0 < E1)
                                
               with binding: [rule starting on line 1.E1 --> pgend;
                             rule starting on line 1.E0 --> pg]
          transform state: 17
               with rule_elem: -free_bootmem
                                 >>> memblock_free(E0, E1 - E0);
                               -(-E0-, -E1 -- -E0-)-;
               with binding: [rule starting on line 1.E1 --> pgend;
                             rule starting on line 1.E0 --> pg]
     binding out = []
     transform one node: 17
     transform one node: 12
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./free_bootmem-77/1540937361_2018-10-30_2013288f7238_init_free_memmap.c.sanitized.c
+++ /tmp/cocci-output-4043220-e102ee-1540937361_2018-10-30_2013288f7238_init_free_memmap.c.sanitized.c
@@ -9,6 +9,5 @@ static inline void free_memmap(unsigned
   pg = PAGE_ALIGN(__pa(start_pg));
   pgend = __pa(end_pg) & PAGE_MASK;
 
-  if (pg < pgend)
-    free_bootmem(pg, pgend - pg);
+  if (pg < pgend)memblock_free(pg, pgend - pg);
 }
\ No newline at end of file
Check duplication for 1 files
