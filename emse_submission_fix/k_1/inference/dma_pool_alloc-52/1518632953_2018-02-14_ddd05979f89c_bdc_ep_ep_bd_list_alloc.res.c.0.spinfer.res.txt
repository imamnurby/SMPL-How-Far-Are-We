init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./dma_pool_alloc-52/final_response_0.spinfer.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
expression E0, E1, E2, E3;
@@
- E0->start_bd = dma_pool_alloc(E1->bd_table_pool, GFP_ATOMIC, &E2); 
+ E0->start_bd = dma_pool_zalloc(E1->bd_table_pool, GFP_ATOMIC, &E2); 
  ...
- memset(E0->start_bd, 0, E3 * sizeof(struct bdc_bd )); 
// Infered from: (./dma_pool_alloc-52/1518632953_2018-02-14_ddd05979f89c_bdc_ep_ep_bd_list_alloc.{c.sanitized.c,res.c.sanitized.res.c}: ep_bd_list_alloc)
// Recall: 1.00, Precision: 1.00, Matching recall: 1.00

// ---------------------------------------------
// Final metrics (for the combined 1 rules):
// -- Edit Location --
// Recall: 1.00, Precision: 1.00
// -- Node Change --
// Recall: 1.00, Precision: 1.00
// -- General --
// Functions fully changed: 1/1(100%)


// ---------------------------------------------

HANDLING: ./dma_pool_alloc-52/1518632953_2018-02-14_ddd05979f89c_bdc_ep_ep_bd_list_alloc.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     transformation info returned:
          transform state: 44
               with rule_elem: -E0
                                 >>> E0->start_bd = dma_pool_zalloc(E1->bd_table_pool,
                                                                    GFP_ATOMIC,
                                                                    &E2);
                               -->-start_bd -= -dma_pool_alloc-(-E1-->-bd_table_pool-,
                                                                -GFP_ATOMIC-,
                                                                -&-E2-)-;
               with binding: [rule starting on line 1.E2 --> dma;
                             rule starting on line 1.E1 --> bdc;
                             rule starting on line 1.E0 --> bd_table]
          transform state: 60
               with rule_elem: -memset-(-E0-->-start_bd-, -0-,
                                        -E3 -* -sizeof-(-struct -bdc_bd -)-)-;
               with binding: [rule starting on line 1.E0 --> bd_table]
     binding out = []
     transform one node: 60
     transform one node: 44
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./dma_pool_alloc-52/1518632953_2018-02-14_ddd05979f89c_bdc_ep_ep_bd_list_alloc.c.sanitized.c
+++ /tmp/cocci-output-4043192-cdb18c-1518632953_2018-02-14_ddd05979f89c_bdc_ep_ep_bd_list_alloc.c.sanitized.c
@@ -23,7 +23,8 @@ static int ep_bd_list_alloc(struct bdc_e
       bd_table = kzalloc(sizeof(struct bd_table), GFP_ATOMIC);
       if (!bd_table)
         goto fail;
-      bd_table->start_bd = dma_pool_alloc(bdc->bd_table_pool, GFP_ATOMIC, &dma);
+      bd_table->start_bd = dma_pool_zalloc(bdc->bd_table_pool, GFP_ATOMIC,
+                                           &dma);
       if (!bd_table->start_bd)
         {
           kfree(bd_table);
@@ -32,7 +33,6 @@ static int ep_bd_list_alloc(struct bdc_e
       bd_table->dma = dma;
       dev_dbg(bdc->dev, "index:%d start_bd:%p dma=%08llx prev_table:%p\n", index, bd_table->start_bd, (unsigned long long)bd_table->dma, prev_table);
       ep->bd_list.bd_table_array[index] = bd_table;
-      memset(bd_table->start_bd, 0, bd_p_tab * sizeof(struct bdc_bd));
       if (prev_table)
         chain_table(prev_table, bd_table, bd_p_tab);
       prev_table = bd_table;
Check duplication for 1 files
