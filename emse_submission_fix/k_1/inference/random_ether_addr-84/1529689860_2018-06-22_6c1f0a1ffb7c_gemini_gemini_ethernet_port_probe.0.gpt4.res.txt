init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./random_ether_addr-84/final_response_0.gpt4.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)

HANDLING: ./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_gemini_gemini_ethernet_port_probe.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     transformation info returned:
          transform state: 176
               with rule_elem: -random_ether_addr
                                 >>> eth_random_addr(E)
                               -(-E-)
               with binding: [rule starting on line 1.E --> netdev->dev_addr]
     binding out = []
     transform one node: 176
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_gemini_gemini_ethernet_port_probe.c.sanitized.c
+++ /tmp/cocci-output-4051651-3a2d0e-1529689860_2018-06-22_6c1f0a1ffb7c_gemini_gemini_ethernet_port_probe.c.sanitized.c
@@ -106,7 +106,7 @@ static int gemini_ethernet_port_probe(st
     {
       dev_dbg(dev, "ethernet address 0x%08x%08x%08x invalid\n", port->mac_addr[0], port->mac_addr[1], port->mac_addr[2]);
       dev_info(dev, "using a random ethernet address\n");
-      random_ether_addr(netdev->dev_addr);
+      eth_random_addr(netdev->dev_addr);
     }
   gmac_write_mac_address(netdev);
   ret = devm_request_threaded_irq(port->dev, port->irq, gemini_port_irq, gemini_port_irq_thread, IRQF_SHARED, port_names[port->id], port);
Check duplication for 1 files
