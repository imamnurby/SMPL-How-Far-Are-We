root,cocci_filename,c_filename,pred,is_cocci_valid,is_applied,diff_truth,diff_pred,diff_5,precision,recall,cocci_fullpath,rank_score,cocci
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_qgroup_btrfs_qgroup_free_meta_all_pertrans,out,1,True,"-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
-  btrfs_qgroup_free_refroot(fs_info, root->objectid, (u64)-1, BTRFS_QGROUP_RSV_META_PERTRANS);
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
+  btrfs_qgroup_free_refroot(fs_info, root->root_key.objectid, (u64)-1, BTRFS_QGROUP_RSV_META_PERTRANS);","-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
-  btrfs_qgroup_free_refroot(fs_info, root->objectid, (u64)-1, BTRFS_QGROUP_RSV_META_PERTRANS);
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
+  btrfs_qgroup_free_refroot(fs_info, root->root_key.objectid, (u64)-1, BTRFS_QGROUP_RSV_META_PERTRANS);","--- initial
+++ final
@@ -1,10 +1,10 @@
 void btrfs_qgroup_free_meta_all_pertrans(struct btrfs_root *root)
 {
   struct btrfs_fs_info *fs_info = root->fs_info;
-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
     return;
 
   trace_qgroup_meta_free_all_pertrans(root);
 
-  btrfs_qgroup_free_refroot(fs_info, root->objectid, (u64)-1, BTRFS_QGROUP_RSV_META_PERTRANS);
+  btrfs_qgroup_free_refroot(fs_info, root->root_key.objectid, (u64)-1, BTRFS_QGROUP_RSV_META_PERTRANS);
 }",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_super_btrfs_statfs,out,1,True,"-  buf->f_fsid.val[0] ^= BTRFS_I(d_inode(dentry))->root->objectid >> 32;
-  buf->f_fsid.val[1] ^= BTRFS_I(d_inode(dentry))->root->objectid;
+  buf->f_fsid.val[0] ^= BTRFS_I(d_inode(dentry))->root->root_key.objectid >> 32;
+  buf->f_fsid.val[1] ^= BTRFS_I(d_inode(dentry))->root->root_key.objectid;","-  buf->f_fsid.val[0] ^= BTRFS_I(d_inode(dentry))->root->objectid >> 32;
-  buf->f_fsid.val[1] ^= BTRFS_I(d_inode(dentry))->root->objectid;
+  buf->f_fsid.val[0] ^= BTRFS_I(d_inode(dentry))->root->root_key.objectid >> 32;
+  buf->f_fsid.val[1] ^= BTRFS_I(d_inode(dentry))->root->root_key.objectid;","--- initial
+++ final
@@ -65,9 +65,9 @@
   buf->f_namelen = BTRFS_NAME_LEN;
 
   buf->f_fsid.val[0] = be32_to_cpu(fsid[0]) ^ be32_to_cpu(fsid[2]);
   buf->f_fsid.val[1] = be32_to_cpu(fsid[1]) ^ be32_to_cpu(fsid[3]);
 
-  buf->f_fsid.val[0] ^= BTRFS_I(d_inode(dentry))->root->objectid >> 32;
-  buf->f_fsid.val[1] ^= BTRFS_I(d_inode(dentry))->root->objectid;
+  buf->f_fsid.val[0] ^= BTRFS_I(d_inode(dentry))->root->root_key.objectid >> 32;
+  buf->f_fsid.val[1] ^= BTRFS_I(d_inode(dentry))->root->root_key.objectid;
   return 0;
 }",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_ctree_add_root_to_dirty_list,out,1,True,"-      if (root->objectid == BTRFS_EXTENT_TREE_OBJECTID)
+      if (root->root_key.objectid == BTRFS_EXTENT_TREE_OBJECTID)","-      if (root->objectid == BTRFS_EXTENT_TREE_OBJECTID)
+      if (root->root_key.objectid == BTRFS_EXTENT_TREE_OBJECTID)","--- initial
+++ final
@@ -5,11 +5,11 @@
     return;
   spin_lock(&fs_info->trans_lock);
   if (!test_and_set_bit(BTRFS_ROOT_DIRTY, &root->state))
     {
 
-      if (root->objectid == BTRFS_EXTENT_TREE_OBJECTID)
+      if (root->root_key.objectid == BTRFS_EXTENT_TREE_OBJECTID)
         list_move_tail(&root->dirty_list, &fs_info->dirty_cowonly_roots);
       else
         list_move(&root->dirty_list, &fs_info->dirty_cowonly_roots);
     }
   spin_unlock(&fs_info->trans_lock);",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_qgroup_btrfs_qgroup_reserve_data,out,1,True,"-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &root->fs_info->flags) || !is_fstree(root->objectid) || len == 0)
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &root->fs_info->flags) || !is_fstree(root->root_key.objectid) || len == 0)","-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &root->fs_info->flags) || !is_fstree(root->objectid) || len == 0)
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &root->fs_info->flags) || !is_fstree(root->root_key.objectid) || len == 0)","--- initial
+++ final
@@ -5,11 +5,11 @@
   struct ulist_iterator uiter;
   struct extent_changeset *reserved;
   u64 orig_reserved;
   u64 to_reserve;
   int ret;
-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &root->fs_info->flags) || !is_fstree(root->objectid) || len == 0)
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &root->fs_info->flags) || !is_fstree(root->root_key.objectid) || len == 0)
     return 0;
 
   if (WARN_ON(!reserved_ret))
     return -EINVAL;
   if (!*reserved_ret)",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_relocation_build_backref_tree,out,1,True,"-          btrfs_err(root->fs_info, ""couldn't find block (%llu) (level %d) in tree (%llu) with key (%llu %u %llu)"", cur->bytenr, level - 1, root->objectid, node_key->objectid, node_key->type, node_key->offset);
+          btrfs_err(root->fs_info, ""couldn't find block (%llu) (level %d) in tree (%llu) with key (%llu %u %llu)"", cur->bytenr, level - 1, root->root_key.objectid, node_key->objectid, node_key->type, node_key->offset);","-          btrfs_err(root->fs_info, ""couldn't find block (%llu) (level %d) in tree (%llu) with key (%llu %u %llu)"", cur->bytenr, level - 1, root->objectid, node_key->objectid, node_key->type, node_key->offset);
+          btrfs_err(root->fs_info, ""couldn't find block (%llu) (level %d) in tree (%llu) with key (%llu %u %llu)"", cur->bytenr, level - 1, root->root_key.objectid, node_key->root_key.objectid, node_key->type, node_key->offset);","--- initial
+++ final
@@ -212,11 +212,11 @@
       if (ret > 0 && path2->slots[level] > 0)
         path2->slots[level]--;
       eb = path2->nodes[level];
       if (btrfs_node_blockptr(eb, path2->slots[level]) != cur->bytenr)
         {
-          btrfs_err(root->fs_info, ""couldn't find block (%llu) (level %d) in tree (%llu) with key (%llu %u %llu)"", cur->bytenr, level - 1, root->objectid, node_key->objectid, node_key->type, node_key->offset);
+          btrfs_err(root->fs_info, ""couldn't find block (%llu) (level %d) in tree (%llu) with key (%llu %u %llu)"", cur->bytenr, level - 1, root->root_key.objectid, node_key->objectid, node_key->type, node_key->offset);
           err = -ENOENT;
           goto out;
         }
       lower = cur;
       need_check = true;",0.5,0.5,./EXP0-7/sp_out.final.claude.cocci,0.6666666666666666,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_qgroup_qgroup_free_reserved_data,out,1,True,"-  btrfs_qgroup_free_refroot(root->fs_info, root->objectid, freed, BTRFS_QGROUP_RSV_DATA);
+  btrfs_qgroup_free_refroot(root->fs_info, root->root_key.objectid, freed, BTRFS_QGROUP_RSV_DATA);","-  btrfs_qgroup_free_refroot(root->fs_info, root->objectid, freed, BTRFS_QGROUP_RSV_DATA);
+  btrfs_qgroup_free_refroot(root->fs_info, root->root_key.objectid, freed, BTRFS_QGROUP_RSV_DATA);","--- initial
+++ final
@@ -27,11 +27,11 @@
       ret = clear_record_extent_bits(&BTRFS_I(inode)->io_failure_tree, free_start, free_start + free_len - 1, EXTENT_QGROUP_RESERVED, &changeset);
       if (ret < 0)
         goto out;
       freed += changeset.bytes_changed;
     }
-  btrfs_qgroup_free_refroot(root->fs_info, root->objectid, freed, BTRFS_QGROUP_RSV_DATA);
+  btrfs_qgroup_free_refroot(root->fs_info, root->root_key.objectid, freed, BTRFS_QGROUP_RSV_DATA);
   ret = freed;
 out:
   extent_changeset_release(&changeset);
   return ret;
 }",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_send_send_subvol_begin,out,1,True,"-  key.objectid = send_root->objectid;
-  if (key.type != BTRFS_ROOT_BACKREF_KEY || key.objectid != send_root->objectid)
+  key.objectid = send_root->root_key.objectid;
+  if (key.type != BTRFS_ROOT_BACKREF_KEY || key.objectid != send_root->root_key.objectid)","-  key.objectid = send_root->objectid;
-  if (key.type != BTRFS_ROOT_BACKREF_KEY || key.objectid != send_root->objectid)
+  key.objectid = send_root->root_key.objectid;
+  if (key.type != BTRFS_ROOT_BACKREF_KEY || key.objectid != send_root->root_key.objectid)","--- initial
+++ final
@@ -16,11 +16,11 @@
   if (!name)
     {
       btrfs_free_path(path);
       return -ENOMEM;
     }
-  key.objectid = send_root->objectid;
+  key.objectid = send_root->root_key.objectid;
   key.type = BTRFS_ROOT_BACKREF_KEY;
   key.offset = 0;
   ret = btrfs_search_slot_for_read(send_root->fs_info->tree_root, &key, path, 1, 0);
   if (ret < 0)
     goto out;
@@ -29,11 +29,11 @@
       ret = -ENOENT;
       goto out;
     }
   leaf = path->nodes[0];
   btrfs_item_key_to_cpu(leaf, &key, path->slots[0]);
-  if (key.type != BTRFS_ROOT_BACKREF_KEY || key.objectid != send_root->objectid)
+  if (key.type != BTRFS_ROOT_BACKREF_KEY || key.objectid != send_root->root_key.objectid)
     {
       ret = -ENOENT;
       goto out;
     }
   ref = btrfs_item_ptr(leaf, path->slots[0], struct btrfs_root_ref);",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_ref-verify_btrfs_ref_tree_mod,out,1,True,"-  ra->root = root->objectid;
-          ref_root = root->objectid;
-          re->root_objectid = root->objectid;
-          btrfs_err(fs_info, ""failed to find root %llu for %llu"", root->objectid, be->bytenr);
+  ra->root = root->root_key.objectid;
+          ref_root = root->root_key.objectid;
+          re->root_objectid = root->root_key.objectid;
+          btrfs_err(fs_info, ""failed to find root %llu for %llu"", root->root_key.objectid, be->bytenr);","-  ra->root = root->objectid;
-          ref_root = root->objectid;
-          re->root_objectid = root->objectid;
-          btrfs_err(fs_info, ""failed to find root %llu for %llu"", root->objectid, be->bytenr);
+  ra->root = root->root_key.objectid;
+          ref_root = root->root_key.objectid;
+          re->root_objectid = root->root_key.objectid;
+          btrfs_err(fs_info, ""failed to find root %llu for %llu"", root->root_key.objectid, be->bytenr);","--- initial
+++ final
@@ -35,11 +35,11 @@
   ra->ref.offset = offset;
   ra->ref.root_objectid = ref_root;
   __save_stack_trace(ra);
   INIT_LIST_HEAD(&ra->list);
   ra->action = action;
-  ra->root = root->objectid;
+  ra->root = root->root_key.objectid;
 
   ret = -EINVAL;
   if (action == BTRFS_ADD_DELAYED_EXTENT)
     {
 
@@ -80,12 +80,12 @@
               kfree(ra);
               ret = -ENOMEM;
               goto out;
             }
 
-          ref_root = root->objectid;
-          re->root_objectid = root->objectid;
+          ref_root = root->root_key.objectid;
+          re->root_objectid = root->root_key.objectid;
           re->num_refs = 0;
         }
       spin_lock(&root->fs_info->ref_verify_lock);
       be = lookup_block_entry(&root->fs_info->block_tree, bytenr);
       if (!be)
@@ -155,11 +155,11 @@
     {
       re = lookup_root_entry(&be->roots, ref_root);
       if (!re)
         {
 
-          btrfs_err(fs_info, ""failed to find root %llu for %llu"", root->objectid, be->bytenr);
+          btrfs_err(fs_info, ""failed to find root %llu for %llu"", root->root_key.objectid, be->bytenr);
           dump_block_entry(fs_info, be);
           dump_ref_action(fs_info, ra);
           kfree(ra);
           goto out_unlock;
         }",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_backref_iterate_inode_refs,out,1,True,"-          btrfs_debug(fs_root->fs_info, ""following ref at offset %u for inode %llu in tree %llu"", cur, found_key.objectid, fs_root->objectid);
+          btrfs_debug(fs_root->fs_info, ""following ref at offset %u for inode %llu in tree %llu"", cur, found_key.objectid, fs_root->root_key.objectid);","-          btrfs_debug(fs_root->fs_info, ""following ref at offset %u for inode %llu in tree %llu"", cur, found_key.objectid, fs_root->objectid);
+          btrfs_debug(fs_root->fs_info, ""following ref at offset %u for inode %llu in tree %llu"", cur, found_key.objectid, fs_root->root_key.objectid);","--- initial
+++ final
@@ -38,11 +38,11 @@
       iref = btrfs_item_ptr(eb, slot, struct btrfs_inode_ref);
       for (cur = 0; cur < btrfs_item_size(eb, item); cur += len)
         {
           name_len = btrfs_inode_ref_name_len(eb, iref);
 
-          btrfs_debug(fs_root->fs_info, ""following ref at offset %u for inode %llu in tree %llu"", cur, found_key.objectid, fs_root->objectid);
+          btrfs_debug(fs_root->fs_info, ""following ref at offset %u for inode %llu in tree %llu"", cur, found_key.objectid, fs_root->root_key.objectid);
           ret = iterate(parent, name_len, (unsigned long)(iref + 1), eb, ctx);
           if (ret)
             break;
           len = sizeof(*iref) + name_len;
           iref = (struct btrfs_inode_ref *)((char *)iref + len);",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_qgroup___btrfs_qgroup_reserve_meta,out,1,True,"-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid) || num_bytes == 0)
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid) || num_bytes == 0)","-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid) || num_bytes == 0)
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid) || num_bytes == 0)","--- initial
+++ final
@@ -1,10 +1,10 @@
 int __btrfs_qgroup_reserve_meta(struct btrfs_root *root, int num_bytes, enum btrfs_qgroup_rsv_type type, bool enforce)
 {
   struct btrfs_fs_info *fs_info = root->fs_info;
   int ret;
-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid) || num_bytes == 0)
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid) || num_bytes == 0)
     return 0;
   BUG_ON(num_bytes != round_down(num_bytes, fs_info->nodesize));
   trace_qgroup_meta_reserve(root, type, (s64)num_bytes);
   ret = qgroup_reserve(root, num_bytes, enforce, type);
   if (ret < 0)",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_ioctl_btrfs_ioctl_default_subvol,out,1,True,"-  if (!is_fstree(new_root->objectid))
+  if (!is_fstree(new_root->root_key.objectid))","-  if (!is_fstree(new_root->objectid))
+  if (!is_fstree(new_root->root_key.objectid))","--- initial
+++ final
@@ -31,11 +31,11 @@
   if (IS_ERR(new_root))
     {
       ret = PTR_ERR(new_root);
       goto out;
     }
-  if (!is_fstree(new_root->objectid))
+  if (!is_fstree(new_root->root_key.objectid))
     {
       ret = -ENOENT;
       goto out;
     }
   path = btrfs_alloc_path();",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_qgroup___btrfs_qgroup_free_meta,out,1,True,"-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
-  btrfs_qgroup_free_refroot(fs_info, root->objectid, num_bytes, type);
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
+  btrfs_qgroup_free_refroot(fs_info, root->root_key.objectid, num_bytes, type);","-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
-  btrfs_qgroup_free_refroot(fs_info, root->objectid, num_bytes, type);
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
+  btrfs_qgroup_free_refroot(fs_info, root->root_key.objectid, num_bytes, type);","--- initial
+++ final
@@ -1,11 +1,11 @@
 void __btrfs_qgroup_free_meta(struct btrfs_root *root, int num_bytes, enum btrfs_qgroup_rsv_type type)
 {
   struct btrfs_fs_info *fs_info = root->fs_info;
-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
     return;
 
   num_bytes = sub_root_meta_rsv(root, num_bytes, type);
   BUG_ON(num_bytes != round_down(num_bytes, fs_info->nodesize));
   trace_qgroup_meta_reserve(root, type, -(s64)num_bytes);
-  btrfs_qgroup_free_refroot(fs_info, root->objectid, num_bytes, type);
+  btrfs_qgroup_free_refroot(fs_info, root->root_key.objectid, num_bytes, type);
 }",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_extent-tree_btrfs_drop_snapshot,out,1,True,"-  btrfs_debug(fs_info, ""Drop subvolume %llu"", root->objectid);
+  btrfs_debug(fs_info, ""Drop subvolume %llu"", root->root_key.objectid);","-  btrfs_debug(fs_info, ""Drop subvolume %llu"", root->objectid);
+  btrfs_debug(fs_info, ""Drop subvolume %llu"", root->root_key.objectid);","--- initial
+++ final
@@ -9,11 +9,11 @@
   struct btrfs_key key;
   int err = 0;
   int ret;
   int level;
   bool root_dropped = false;
-  btrfs_debug(fs_info, ""Drop subvolume %llu"", root->objectid);
+  btrfs_debug(fs_info, ""Drop subvolume %llu"", root->root_key.objectid);
   path = btrfs_alloc_path();
   if (!path)
     {
       err = -ENOMEM;
       goto out;",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_qgroup_btrfs_qgroup_convert_reserved_meta,out,1,True,"-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
-  qgroup_convert_meta(fs_info, root->objectid, num_bytes);
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
+  qgroup_convert_meta(fs_info, root->root_key.objectid, num_bytes);","-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
-  qgroup_convert_meta(fs_info, root->objectid, num_bytes);
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
+  qgroup_convert_meta(fs_info, root->root_key.objectid, num_bytes);","--- initial
+++ final
@@ -1,10 +1,10 @@
 void btrfs_qgroup_convert_reserved_meta(struct btrfs_root *root, int num_bytes)
 {
   struct btrfs_fs_info *fs_info = root->fs_info;
-  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->objectid))
+  if (!test_bit(BTRFS_FS_QUOTA_ENABLED, &fs_info->flags) || !is_fstree(root->root_key.objectid))
     return;
 
   num_bytes = sub_root_meta_rsv(root, num_bytes, BTRFS_QGROUP_RSV_META_PREALLOC);
   trace_qgroup_meta_convert(root, num_bytes);
-  qgroup_convert_meta(fs_info, root->objectid, num_bytes);
+  qgroup_convert_meta(fs_info, root->root_key.objectid, num_bytes);
 }",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./EXP0-7,sp_out.final.claude.cocci,1533533124_2018-08-06_4fd786e6c3d6_transaction_switch_commit_roots,out,1,True,"-    if (is_fstree(root->objectid))
+    if (is_fstree(root->root_key.objectid))","-    if (is_fstree(root->objectid))
+    if (is_fstree(root->root_key.objectid))","--- initial
+++ final
@@ -6,11 +6,11 @@
   list_for_each_entry_safe(root, tmp, &trans->switch_commits, dirty_list)
   {
     list_del_init(&root->dirty_list);
     free_extent_buffer(root->commit_root);
     root->commit_root = btrfs_root_node(root);
-    if (is_fstree(root->objectid))
+    if (is_fstree(root->root_key.objectid))
       btrfs_unpin_free_ino(root);
     clear_btree_io_tree(&root->dirty_log_pages);
   }
 
   spin_lock(&trans->dropped_roots_lock);",1.0,1.0,./EXP0-7/sp_out.final.claude.cocci,1.0,"@@ 
expression E;
@@
- E->objectid
+ E->root_key.objectid


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_qfq_qfq_init_qdisc,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);",,"--- initial
+++ final
@@ -2,11 +2,11 @@
 {
   struct qfq_sched *q = qdisc_priv(sch);
   struct qfq_group *grp;
   int i, j, err;
   u32 max_cl_shift, maxbudg_shift, max_classes;
-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);
   if (err)
     return err;
   err = qdisc_class_hash_init(&q->clhash);
   if (err < 0)
     return err;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_dsmark_dsmark_init,out,0,False,"-  err = tcf_block_get(&p->block, &p->filter_list, sch);
+  err = tcf_block_get(&p->block, &p->filter_list, sch, extack);",,"--- initial
+++ final
@@ -7,11 +7,11 @@
   u16 indices;
   int i;
   pr_debug(""%s(sch %p,[qdisc %p],opt %p)\n"", __func__, sch, p, opt);
   if (!opt)
     goto errout;
-  err = tcf_block_get(&p->block, &p->filter_list, sch);
+  err = tcf_block_get(&p->block, &p->filter_list, sch, extack);
   if (err)
     return err;
   err = nla_parse_nested(tb, TCA_DSMARK_MAX, opt, dsmark_policy, NULL);
   if (err < 0)
     goto errout;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_sfb_sfb_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);",,"--- initial
+++ final
@@ -1,10 +1,10 @@
 static int sfb_init(struct Qdisc *sch, struct nlattr *opt, struct netlink_ext_ack *extack)
 {
   struct sfb_sched_data *q = qdisc_priv(sch);
   int err;
-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);
   if (err)
     return err;
   q->qdisc = &noop_qdisc;
   return sfb_change(sch, opt, extack);
 }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_cbq_cbq_change_class,out,0,False,"-  err = tcf_block_get(&cl->block, &cl->filter_list);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch);",,"--- initial
+++ final
@@ -101,11 +101,11 @@
     }
   err = -ENOBUFS;
   cl = kzalloc(sizeof(*cl), GFP_KERNEL);
   if (cl == NULL)
     goto failure;
-  err = tcf_block_get(&cl->block, &cl->filter_list);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch);
   if (err)
     {
       kfree(cl);
       return err;
     }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_atm_atm_tc_init,out,0,False,"-  err = tcf_block_get(&p->link.block, &p->link.filter_list);
+  err = tcf_block_get(&p->link.block, &p->link.filter_list, sch);",,"--- initial
+++ final
@@ -8,11 +8,11 @@
   list_add(&p->link.list, &p->flows);
   p->link.q = qdisc_create_dflt(sch->dev_queue, &pfifo_qdisc_ops, sch->handle);
   if (!p->link.q)
     p->link.q = &noop_qdisc;
   pr_debug(""atm_tc_init: link (%p) qdisc %p\n"", &p->link, p->link.q);
-  err = tcf_block_get(&p->link.block, &p->link.filter_list);
+  err = tcf_block_get(&p->link.block, &p->link.filter_list, sch);
   if (err)
     return err;
   p->link.vcc = NULL;
   p->link.sock = NULL;
   p->link.common.classid = sch->handle;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_atm_atm_tc_init,out,0,False,"-  err = tcf_block_get(&p->link.block, &p->link.filter_list, sch);
+  err = tcf_block_get(&p->link.block, &p->link.filter_list, sch, extack);",,"--- initial
+++ final
@@ -8,11 +8,11 @@
   list_add(&p->link.list, &p->flows);
   p->link.q = qdisc_create_dflt(sch->dev_queue, &pfifo_qdisc_ops, sch->handle);
   if (!p->link.q)
     p->link.q = &noop_qdisc;
   pr_debug(""atm_tc_init: link (%p) qdisc %p\n"", &p->link, p->link.q);
-  err = tcf_block_get(&p->link.block, &p->link.filter_list, sch);
+  err = tcf_block_get(&p->link.block, &p->link.filter_list, sch, extack);
   if (err)
     return err;
   p->link.vcc = NULL;
   p->link.sock = NULL;
   p->link.common.classid = sch->handle;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_hfsc_hfsc_init_qdisc,out,0,False,"-  err = tcf_block_get(&q->root.block, &q->root.filter_list);
+  err = tcf_block_get(&q->root.block, &q->root.filter_list, sch);",,"--- initial
+++ final
@@ -10,11 +10,11 @@
   q->defcls = qopt->defcls;
   err = qdisc_class_hash_init(&q->clhash);
   if (err < 0)
     return err;
   q->eligible = RB_ROOT;
-  err = tcf_block_get(&q->root.block, &q->root.filter_list);
+  err = tcf_block_get(&q->root.block, &q->root.filter_list, sch);
   if (err)
     return err;
   q->root.cl_common.classid = sch->handle;
   q->root.sched = q;
   q->root.qdisc = qdisc_create_dflt(sch->dev_queue, &pfifo_qdisc_ops, sch->handle);",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_multiq_multiq_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);",,"--- initial
+++ final
@@ -3,11 +3,11 @@
   struct multiq_sched_data *q = qdisc_priv(sch);
   int i, err;
   q->queues = NULL;
   if (!opt)
     return -EINVAL;
-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);
   if (err)
     return err;
   q->max_bands = qdisc_dev(sch)->num_tx_queues;
   q->queues = kcalloc(q->max_bands, sizeof(struct Qdisc *), GFP_KERNEL);
   if (!q->queues)",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_ingress_clsact_init,out,0,False,"-  err = tcf_block_get(&q->ingress_block, &dev->ingress_cl_list);
-  err = tcf_block_get(&q->egress_block, &dev->egress_cl_list);
+  err = tcf_block_get(&q->ingress_block, &dev->ingress_cl_list, sch);
+  err = tcf_block_get(&q->egress_block, &dev->egress_cl_list, sch);",,"--- initial
+++ final
@@ -1,14 +1,14 @@
 static int clsact_init(struct Qdisc *sch, struct nlattr *opt)
 {
   struct clsact_sched_data *q = qdisc_priv(sch);
   struct net_device *dev = qdisc_dev(sch);
   int err;
-  err = tcf_block_get(&q->ingress_block, &dev->ingress_cl_list);
+  err = tcf_block_get(&q->ingress_block, &dev->ingress_cl_list, sch);
   if (err)
     return err;
-  err = tcf_block_get(&q->egress_block, &dev->egress_cl_list);
+  err = tcf_block_get(&q->egress_block, &dev->egress_cl_list, sch);
   if (err)
     return err;
   net_inc_ingress_queue();
   net_inc_egress_queue();
   sch->flags |= TCQ_F_CPUSTATS;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_hfsc_hfsc_change_class,out,0,False,"-  err = tcf_block_get(&cl->block, &cl->filter_list, sch);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);",,"--- initial
+++ final
@@ -93,11 +93,11 @@
   if (rsc == NULL && fsc == NULL)
     return -EINVAL;
   cl = kzalloc(sizeof(struct hfsc_class), GFP_KERNEL);
   if (cl == NULL)
     return -ENOBUFS;
-  err = tcf_block_get(&cl->block, &cl->filter_list, sch);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);
   if (err)
     {
       kfree(cl);
       return err;
     }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_qfq_qfq_init_qdisc,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);",,"--- initial
+++ final
@@ -2,11 +2,11 @@
 {
   struct qfq_sched *q = qdisc_priv(sch);
   struct qfq_group *grp;
   int i, j, err;
   u32 max_cl_shift, maxbudg_shift, max_classes;
-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);
   if (err)
     return err;
   err = qdisc_class_hash_init(&q->clhash);
   if (err < 0)
     return err;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_atm_atm_tc_change,out,0,False,"-  error = tcf_block_get(&flow->block, &flow->filter_list, sch);
+  error = tcf_block_get(&flow->block, &flow->filter_list, sch, extack);",,"--- initial
+++ final
@@ -87,11 +87,11 @@
   if (!flow)
     {
       error = -ENOBUFS;
       goto err_out;
     }
-  error = tcf_block_get(&flow->block, &flow->filter_list, sch);
+  error = tcf_block_get(&flow->block, &flow->filter_list, sch, extack);
   if (error)
     {
       kfree(flow);
       goto err_out;
     }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_htb_htb_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);",,"--- initial
+++ final
@@ -7,11 +7,11 @@
   int i;
   qdisc_watchdog_init(&q->watchdog, sch);
   INIT_WORK(&q->work, htb_work_func);
   if (!opt)
     return -EINVAL;
-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);
   if (err)
     return err;
   err = nla_parse_nested(tb, TCA_HTB_MAX, opt, htb_policy, NULL);
   if (err < 0)
     return err;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_prio_prio_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);",,"--- initial
+++ final
@@ -2,10 +2,10 @@
 {
   struct prio_sched_data *q = qdisc_priv(sch);
   int err;
   if (!opt)
     return -EINVAL;
-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);
   if (err)
     return err;
   return prio_tune(sch, opt, extack);
 }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_cbq_cbq_change_class,out,0,False,"-  err = tcf_block_get(&cl->block, &cl->filter_list, sch);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);",,"--- initial
+++ final
@@ -101,11 +101,11 @@
     }
   err = -ENOBUFS;
   cl = kzalloc(sizeof(*cl), GFP_KERNEL);
   if (cl == NULL)
     goto failure;
-  err = tcf_block_get(&cl->block, &cl->filter_list, sch);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);
   if (err)
     {
       kfree(cl);
       return err;
     }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_dsmark_dsmark_init,out,0,False,"-  err = tcf_block_get(&p->block, &p->filter_list);
+  err = tcf_block_get(&p->block, &p->filter_list, sch);",,"--- initial
+++ final
@@ -7,11 +7,11 @@
   u16 indices;
   int i;
   pr_debug(""%s(sch %p,[qdisc %p],opt %p)\n"", __func__, sch, p, opt);
   if (!opt)
     goto errout;
-  err = tcf_block_get(&p->block, &p->filter_list);
+  err = tcf_block_get(&p->block, &p->filter_list, sch);
   if (err)
     return err;
   err = nla_parse_nested(tb, TCA_DSMARK_MAX, opt, dsmark_policy, NULL);
   if (err < 0)
     goto errout;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_htb_htb_change_class,out,0,False,"-      err = tcf_block_get(&cl->block, &cl->filter_list);
+      err = tcf_block_get(&cl->block, &cl->filter_list, sch);",,"--- initial
+++ final
@@ -57,11 +57,11 @@
         }
       err = -ENOBUFS;
       cl = kzalloc(sizeof(*cl), GFP_KERNEL);
       if (!cl)
         goto failure;
-      err = tcf_block_get(&cl->block, &cl->filter_list);
+      err = tcf_block_get(&cl->block, &cl->filter_list, sch);
       if (err)
         {
           kfree(cl);
           goto failure;
         }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_hfsc_hfsc_init_qdisc,out,0,False,"-  err = tcf_block_get(&q->root.block, &q->root.filter_list, sch);
+  err = tcf_block_get(&q->root.block, &q->root.filter_list, sch, extack);",,"--- initial
+++ final
@@ -10,11 +10,11 @@
   q->defcls = qopt->defcls;
   err = qdisc_class_hash_init(&q->clhash);
   if (err < 0)
     return err;
   q->eligible = RB_ROOT;
-  err = tcf_block_get(&q->root.block, &q->root.filter_list, sch);
+  err = tcf_block_get(&q->root.block, &q->root.filter_list, sch, extack);
   if (err)
     return err;
   q->root.cl_common.classid = sch->handle;
   q->root.sched = q;
   q->root.qdisc = qdisc_create_dflt(sch->dev_queue, &pfifo_qdisc_ops, sch->handle);",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_fq_codel_fq_codel_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);",,"--- initial
+++ final
@@ -18,11 +18,11 @@
     {
       int err = fq_codel_change(sch, opt, extack);
       if (err)
         return err;
     }
-  err = tcf_block_get(&q->block, &q->filter_list, sch);
+  err = tcf_block_get(&q->block, &q->filter_list, sch, extack);
   if (err)
     return err;
   if (!q->flows)
     {
       q->flows = kvzalloc(q->flows_cnt * sizeof(struct fq_codel_flow), GFP_KERNEL);",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_sfq_sfq_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);",,"--- initial
+++ final
@@ -2,11 +2,11 @@
 {
   struct sfq_sched_data *q = qdisc_priv(sch);
   int i;
   int err;
   setup_deferrable_timer(&q->perturb_timer, sfq_perturbation, (unsigned long)sch);
-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);
   if (err)
     return err;
   for (i = 0; i < SFQ_MAX_DEPTH + 1; i++)
     {
       q->dep[i].next = i + SFQ_MAX_FLOWS;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_prio_prio_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);",,"--- initial
+++ final
@@ -2,10 +2,10 @@
 {
   struct prio_sched_data *q = qdisc_priv(sch);
   int err;
   if (!opt)
     return -EINVAL;
-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);
   if (err)
     return err;
   return prio_tune(sch, opt);
 }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_ingress_ingress_init,out,0,False,"-  err = tcf_block_get(&q->block, &dev->ingress_cl_list);
+  err = tcf_block_get(&q->block, &dev->ingress_cl_list, sch);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 static int ingress_init(struct Qdisc *sch, struct nlattr *opt)
 {
   struct ingress_sched_data *q = qdisc_priv(sch);
   struct net_device *dev = qdisc_dev(sch);
   int err;
-  err = tcf_block_get(&q->block, &dev->ingress_cl_list);
+  err = tcf_block_get(&q->block, &dev->ingress_cl_list, sch);
   if (err)
     return err;
   net_inc_ingress_queue();
   sch->flags |= TCQ_F_CPUSTATS;
   return 0;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_hfsc_hfsc_change_class,out,0,False,"-  err = tcf_block_get(&cl->block, &cl->filter_list);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch);",,"--- initial
+++ final
@@ -93,11 +93,11 @@
   if (rsc == NULL && fsc == NULL)
     return -EINVAL;
   cl = kzalloc(sizeof(struct hfsc_class), GFP_KERNEL);
   if (cl == NULL)
     return -ENOBUFS;
-  err = tcf_block_get(&cl->block, &cl->filter_list);
+  err = tcf_block_get(&cl->block, &cl->filter_list, sch);
   if (err)
     {
       kfree(cl);
       return err;
     }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_cbq_cbq_init,out,0,False,"-  err = tcf_block_get(&q->link.block, &q->link.filter_list, sch);
+  err = tcf_block_get(&q->link.block, &q->link.filter_list, sch, extack);",,"--- initial
+++ final
@@ -16,11 +16,11 @@
     return -EINVAL;
   r = nla_data(tb[TCA_CBQ_RATE]);
   q->link.R_tab = qdisc_get_rtab(r, tb[TCA_CBQ_RTAB], extack);
   if (!q->link.R_tab)
     return -EINVAL;
-  err = tcf_block_get(&q->link.block, &q->link.filter_list, sch);
+  err = tcf_block_get(&q->link.block, &q->link.filter_list, sch, extack);
   if (err)
     goto put_rtab;
   err = qdisc_class_hash_init(&q->clhash);
   if (err < 0)
     goto put_block;",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1513791319_2017-12-20_8d1a77f974ca_sch_htb_htb_change_class,out,0,False,"-      err = tcf_block_get(&cl->block, &cl->filter_list, sch);
+      err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);",,"--- initial
+++ final
@@ -57,11 +57,11 @@
         }
       err = -ENOBUFS;
       cl = kzalloc(sizeof(*cl), GFP_KERNEL);
       if (!cl)
         goto failure;
-      err = tcf_block_get(&cl->block, &cl->filter_list, sch);
+      err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);
       if (err)
         {
           kfree(cl);
           goto failure;
         }",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_fq_codel_fq_codel_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);",,"--- initial
+++ final
@@ -18,11 +18,11 @@
     {
       int err = fq_codel_change(sch, opt);
       if (err)
         return err;
     }
-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);
   if (err)
     return err;
   if (!q->flows)
     {
       q->flows = kvzalloc(q->flows_cnt * sizeof(struct fq_codel_flow), GFP_KERNEL);",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./tcf_block_get-61,sp_out.final.claude.cocci,1507896057_2017-10-13_69d78ef25c7b_sch_multiq_multiq_init,out,0,False,"-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);",,"--- initial
+++ final
@@ -3,11 +3,11 @@
   struct multiq_sched_data *q = qdisc_priv(sch);
   int i, err;
   q->queues = NULL;
   if (opt == NULL)
     return -EINVAL;
-  err = tcf_block_get(&q->block, &q->filter_list);
+  err = tcf_block_get(&q->block, &q->filter_list, sch);
   if (err)
     return err;
   q->max_bands = qdisc_dev(sch)->num_tx_queues;
   q->queues = kcalloc(q->max_bands, sizeof(struct Qdisc *), GFP_KERNEL);
   if (!q->queues)",0.0,0.0,./tcf_block_get-61/sp_out.final.claude.cocci,0.0,"@@
expression block, filter_list, sch, extack;
@@
(
- tcf_block_get(block, filter_list)
+ tcf_block_get(block, filter_list, sch)
|
- tcf_block_get(block, filter_list, sch)
+ tcf_block_get(block, filter_list, sch, extack)
)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_datagram_datagram_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,10 +1,10 @@
 __poll_t datagram_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk;
   __poll_t mask;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   mask = 0;
 
   if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))
     mask |= EPOLLERR | (sock_flag(sk, SOCK_SELECT_ERR_QUEUE) ? EPOLLPRI : 0);
   if (sk->sk_shutdown & RCV_SHUTDOWN)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_caif_socket_caif_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 static __poll_t caif_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk;
   __poll_t mask;
   struct caifsock *cf_sk = container_of(sk, struct caifsock, sk);
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   mask = 0;
 
   if (sk->sk_err)
     mask |= EPOLLERR;
   if (sk->sk_shutdown == SHUTDOWN_MASK)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_af_unix_unix_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,10 +1,10 @@
 static __poll_t unix_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk;
   __poll_t mask;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   mask = 0;
 
   if (sk->sk_err)
     mask |= EPOLLERR;
   if (sk->sk_shutdown == SHUTDOWN_MASK)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_socket_tipc_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 static __poll_t tipc_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk;
   struct tipc_sock *tsk = tipc_sk(sk);
   __poll_t revents = 0;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   if (sk->sk_shutdown & RCV_SHUTDOWN)
     revents |= EPOLLRDHUP | EPOLLIN | EPOLLRDNORM;
   if (sk->sk_shutdown == SHUTDOWN_MASK)
     revents |= EPOLLHUP;
   switch (sk->sk_state)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_proto_dccp_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,10 +1,10 @@
 __poll_t dccp_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   __poll_t mask;
   struct sock *sk = sock->sk;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   if (sk->sk_state == DCCP_LISTEN)
     return inet_csk_listen_poll(sk);
 
   mask = 0;
   if (sk->sk_err)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_af_iucv_iucv_sock_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,10 +1,10 @@
 __poll_t iucv_sock_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk;
   __poll_t mask = 0;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   if (sk->sk_state == IUCV_LISTEN)
     return iucv_accept_poll(sk);
   if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))
     mask |= EPOLLERR | (sock_flag(sk, SOCK_SELECT_ERR_QUEUE) ? EPOLLPRI : 0);
   if (sk->sk_shutdown & RCV_SHUTDOWN)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_common_vcc_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 __poll_t vcc_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk;
   struct atm_vcc *vcc;
   __poll_t mask;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   mask = 0;
   vcc = ATM_SD(sock);
 
   if (sk->sk_err)
     mask = EPOLLERR;",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_af_alg_af_alg_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -2,11 +2,11 @@
 {
   struct sock *sk = sock->sk;
   struct alg_sock *ask = alg_sk(sk);
   struct af_alg_ctx *ctx = ask->private;
   __poll_t mask;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   mask = 0;
   if (!ctx->more || ctx->used)
     mask |= EPOLLIN | EPOLLRDNORM;
   if (af_alg_writable(sk))
     mask |= EPOLLOUT | EPOLLWRNORM | EPOLLWRBAND;",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_af_smc_smc_poll,out,0,False,"-        sock_poll_wait(file, wait);
+        sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -15,11 +15,11 @@
         mask |= EPOLLERR;
     }
   else
     {
       if (sk->sk_state != SMC_CLOSED)
-        sock_poll_wait(file, wait);
+        sock_poll_wait(file, sock, wait);
       if (sk->sk_err)
         mask |= EPOLLERR;
       if ((sk->sk_shutdown == SHUTDOWN_MASK) || (sk->sk_state == SMC_CLOSED))
         mask |= EPOLLHUP;
       if (sk->sk_state == SMC_LISTEN)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./sock_poll_wait-84,sp_out.final.claude.cocci,1540294839_2018-10-23_89ab066d4229_af_unix_unix_dgram_poll,out,0,False,"-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 static __poll_t unix_dgram_poll(struct file *file, struct socket *sock, poll_table *wait)
 {
   struct sock *sk = sock->sk, *other;
   unsigned int writable;
   __poll_t mask;
-  sock_poll_wait(file, wait);
+  sock_poll_wait(file, sock, wait);
   mask = 0;
 
   if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))
     mask |= EPOLLERR | (sock_flag(sk, SOCK_SELECT_ERR_QUEUE) ? EPOLLPRI : 0);
   if (sk->sk_shutdown & RCV_SHUTDOWN)",0.0,0.0,./sock_poll_wait-84/sp_out.final.claude.cocci,0.0,"@@
expression file, wait;
identifier sock;
@@
- sock_poll_wait(file, wait)
+ sock_poll_wait(file, sock, wait)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_bridge_loop_avoidance_batadv_bla_periodic_work,out,1,True,"-      random_ether_addr(bat_priv->bla.loopdetect_addr);
+      eth_random_addr(bat_priv->bla.loopdetect_addr);","-      random_ether_addr(bat_priv->bla.loopdetect_addr);
+      eth_random_addr(bat_priv->bla.loopdetect_addr);","--- initial
+++ final
@@ -20,11 +20,11 @@
   if (!atomic_read(&bat_priv->bridge_loop_avoidance))
     goto out;
   if (atomic_dec_and_test(&bat_priv->bla.loopdetect_next))
     {
 
-      random_ether_addr(bat_priv->bla.loopdetect_addr);
+      eth_random_addr(bat_priv->bla.loopdetect_addr);
       bat_priv->bla.loopdetect_addr[0] = 0xba;
       bat_priv->bla.loopdetect_addr[1] = 0xbe;
       bat_priv->bla.loopdetect_lasttime = jiffies;
       atomic_set(&bat_priv->bla.loopdetect_next, BATADV_BLA_LOOPDETECT_PERIODS);
 ",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_hip04_eth_hip04_mac_probe,out,1,True,"-  random_ether_addr(ndev->dev_addr);
+  eth_random_addr(ndev->dev_addr);","-  random_ether_addr(ndev->dev_addr);
+  eth_random_addr(ndev->dev_addr);","--- initial
+++ final
@@ -80,11 +80,11 @@
   netif_napi_add(ndev, &priv->napi, hip04_rx_poll, NAPI_POLL_WEIGHT);
   hip04_reset_ppe(priv);
   if (priv->phy_mode == PHY_INTERFACE_MODE_MII)
     hip04_config_port(ndev, SPEED_100, DUPLEX_FULL);
   hip04_config_fifo(priv);
-  random_ether_addr(ndev->dev_addr);
+  eth_random_addr(ndev->dev_addr);
   hip04_update_mac_address(ndev);
   ret = hip04_alloc_ring(ndev, d);
   if (ret)
     {
       netdev_err(ndev, ""alloc ring fail\n"");",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_netcp_core_netcp_create_interface,out,1,True,"-        random_ether_addr(ndev->dev_addr);
-        random_ether_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);","-        random_ether_addr(ndev->dev_addr);
-        random_ether_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);","--- initial
+++ final
@@ -67,21 +67,21 @@
         }
       emac_arch_get_mac_addr(efuse_mac_addr, efuse, efuse_mac);
       if (is_valid_ether_addr(efuse_mac_addr))
         ether_addr_copy(ndev->dev_addr, efuse_mac_addr);
       else
-        random_ether_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);
       devm_iounmap(dev, efuse);
       devm_release_mem_region(dev, res.start, size);
     }
   else
     {
       mac_addr = of_get_mac_address(node_interface);
       if (mac_addr)
         ether_addr_copy(ndev->dev_addr, mac_addr);
       else
-        random_ether_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);
     }
   ret = of_property_read_string(node_interface, ""rx-channel"", &netcp->dma_chan_name);
   if (ret < 0)
     {
       dev_err(dev, ""missing \""rx-channel\"" parameter\n"");",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_ef10_sriov_efx_ef10_sriov_alloc_vf_vswitching,out,1,True,"-      random_ether_addr(nic_data->vf[i].mac);
+      eth_random_addr(nic_data->vf[i].mac);","-      random_ether_addr(nic_data->vf[i].mac);
+      eth_random_addr(nic_data->vf[i].mac);","--- initial
+++ final
@@ -6,11 +6,11 @@
   nic_data->vf = kcalloc(efx->vf_count, sizeof(struct ef10_vf), GFP_KERNEL);
   if (!nic_data->vf)
     return -ENOMEM;
   for (i = 0; i < efx->vf_count; i++)
     {
-      random_ether_addr(nic_data->vf[i].mac);
+      eth_random_addr(nic_data->vf[i].mac);
       nic_data->vf[i].efx = NULL;
       nic_data->vf[i].vlan = EFX_EF10_NO_VLAN;
       rc = efx_ef10_sriov_assign_vf_vport(efx, i);
       if (rc)
         goto fail;",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_lan743x_main_lan743x_mac_init,out,1,True,"-    random_ether_addr(adapter->mac_address);
+    eth_random_addr(adapter->mac_address);","-    random_ether_addr(adapter->mac_address);
+    eth_random_addr(adapter->mac_address);","--- initial
+++ final
@@ -31,10 +31,10 @@
   else if (!is_valid_ether_addr(adapter->mac_address))
     {
       mac_address_valid = false;
     }
   if (!mac_address_valid)
-    random_ether_addr(adapter->mac_address);
+    eth_random_addr(adapter->mac_address);
   lan743x_mac_set_address(adapter, adapter->mac_address);
   ether_addr_copy(netdev->dev_addr, adapter->mac_address);
   return 0;
 }",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_cpsw_cpsw_probe_dual_emac,out,1,True,"-      random_ether_addr(priv_sl2->mac_addr);
+      eth_random_addr(priv_sl2->mac_addr);","-      random_ether_addr(priv_sl2->mac_addr);
+      eth_random_addr(priv_sl2->mac_addr);","--- initial
+++ final
@@ -21,11 +21,11 @@
       memcpy(priv_sl2->mac_addr, data->slave_data[1].mac_addr, ETH_ALEN);
       dev_info(cpsw->dev, ""cpsw: Detected MACID = %pM\n"", priv_sl2->mac_addr);
     }
   else
     {
-      random_ether_addr(priv_sl2->mac_addr);
+      eth_random_addr(priv_sl2->mac_addr);
       dev_info(cpsw->dev, ""cpsw: Random MACID = %pM\n"", priv_sl2->mac_addr);
     }
   memcpy(ndev->dev_addr, priv_sl2->mac_addr, ETH_ALEN);
   priv_sl2->emac_port = 1;
   cpsw->slaves[1].ndev = ndev;",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_i40e_main_i40e_config_netdev,out,1,True,"-      random_ether_addr(mac_addr);
+      eth_random_addr(mac_addr);","-      random_ether_addr(mac_addr);
+      eth_random_addr(mac_addr);","--- initial
+++ final
@@ -41,11 +41,11 @@
     }
   else
     {
 
       snprintf(netdev->name, IFNAMSIZ, ""%.*sv%%d"", IFNAMSIZ - 4, pf->vsi[pf->lan_vsi]->netdev->name);
-      random_ether_addr(mac_addr);
+      eth_random_addr(mac_addr);
       spin_lock_bh(&vsi->mac_filter_hash_lock);
       i40e_add_mac_filter(vsi, mac_addr);
       spin_unlock_bh(&vsi->mac_filter_hash_lock);
     }
 ",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529735368_2018-06-22_8e5c88bfbb8c_board_ath25_find_config,out,1,True,"-          random_ether_addr(config->wlan0_mac);
-          random_ether_addr(config->enet0_mac);
-          random_ether_addr(config->enet1_mac);
+          eth_random_addr(config->wlan0_mac);
+          eth_random_addr(config->enet0_mac);
+          eth_random_addr(config->enet1_mac);","-          random_ether_addr(config->wlan0_mac);
-          random_ether_addr(config->enet0_mac);
-          random_ether_addr(config->enet1_mac);
+          eth_random_addr(config->wlan0_mac);
+          eth_random_addr(config->enet0_mac);
+          eth_random_addr(config->enet1_mac);","--- initial
+++ final
@@ -38,14 +38,14 @@
       if (is_zero_ether_addr(config->enet0_mac))
         {
           pr_info(""Fixing up empty mac addresses\n"");
           config->reset_config_gpio = 0xffff;
           config->sys_led_gpio = 0xffff;
-          random_ether_addr(config->wlan0_mac);
+          eth_random_addr(config->wlan0_mac);
           config->wlan0_mac[0] &= ~0x06;
-          random_ether_addr(config->enet0_mac);
-          random_ether_addr(config->enet1_mac);
+          eth_random_addr(config->enet0_mac);
+          eth_random_addr(config->enet1_mac);
         }
     }
 
   rcfg = find_radio_config(flash_limit, bcfg);
   if (!rcfg)",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_ntb_netdev_ntb_netdev_probe,out,1,True,"-  random_ether_addr(ndev->perm_addr);
+  eth_random_addr(ndev->perm_addr);","-  random_ether_addr(ndev->perm_addr);
+  eth_random_addr(ndev->perm_addr);","--- initial
+++ final
@@ -18,11 +18,11 @@
   dev->pdev = pdev;
   ndev->features = NETIF_F_HIGHDMA;
   ndev->priv_flags |= IFF_LIVE_ADDR_CHANGE;
   ndev->hw_features = ndev->features;
   ndev->watchdog_timeo = msecs_to_jiffies(NTB_TX_TIMEOUT_MS);
-  random_ether_addr(ndev->perm_addr);
+  eth_random_addr(ndev->perm_addr);
   memcpy(ndev->dev_addr, ndev->perm_addr, ndev->addr_len);
   ndev->netdev_ops = &ntb_netdev_ops;
   ndev->ethtool_ops = &ntb_ethtool_ops;
   ndev->min_mtu = 0;
   ndev->max_mtu = ETH_MAX_MTU;",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_hw_ath9k_hw_init_macaddr,out,1,True,"-  random_ether_addr(common->macaddr);
+  eth_random_addr(common->macaddr);","-  random_ether_addr(common->macaddr);
+  eth_random_addr(common->macaddr);","--- initial
+++ final
@@ -14,9 +14,9 @@
       common->macaddr[2 * i + 1] = eeval & 0xff;
     }
   if (is_valid_ether_addr(common->macaddr))
     return;
   ath_err(common, ""eeprom contains invalid mac address: %pM\n"", common->macaddr);
-  random_ether_addr(common->macaddr);
+  eth_random_addr(common->macaddr);
   ath_err(common, ""random mac address will be used: %pM\n"", common->macaddr);
   return;
 }",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529689860_2018-06-22_6c1f0a1ffb7c_lan78xx_lan78xx_init_mac_address,out,1,True,"-          random_ether_addr(addr);
+          eth_random_addr(addr);","-          random_ether_addr(addr);
+          eth_random_addr(addr);","--- initial
+++ final
@@ -24,11 +24,11 @@
           netif_dbg(dev, ifup, dev->net, ""MAC address read from EEPROM"");
         }
       else
         {
 
-          random_ether_addr(addr);
+          eth_random_addr(addr);
           netif_dbg(dev, ifup, dev->net, ""MAC address set to random addr"");
         }
       addr_lo = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24);
       addr_hi = addr[4] | (addr[5] << 8);
       ret = lan78xx_write_reg(dev, RX_ADDRL, addr_lo);",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./random_ether_addr-84,sp_out.final.claude.cocci,1529774878_2018-06-23_6d2b0f7b9c1e_ieee80211_softmac_ieee80211_start_ibss_wq,out,1,True,"-        random_ether_addr(ieee->current_network.bssid);
+        eth_random_addr(ieee->current_network.bssid);","-        random_ether_addr(ieee->current_network.bssid);
+        eth_random_addr(ieee->current_network.bssid);","--- initial
+++ final
@@ -26,11 +26,11 @@
 
   if (ieee->state == IEEE80211_NOLINK)
     {
       printk(""creating new IBSS cell\n"");
       if (!ieee->wap_set)
-        random_ether_addr(ieee->current_network.bssid);
+        eth_random_addr(ieee->current_network.bssid);
       if (ieee->modulation & IEEE80211_CCK_MODULATION)
         {
           ieee->current_network.rates_len = 4;
           ieee->current_network.rates[0] = IEEE80211_BASIC_RATE_MASK | IEEE80211_CCK_RATE_1MB;
           ieee->current_network.rates[1] = IEEE80211_BASIC_RATE_MASK | IEEE80211_CCK_RATE_2MB;",1.0,1.0,./random_ether_addr-84/sp_out.final.claude.cocci,1.0,"@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_btmrg_shutdown,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static void mt2701_btmrg_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt2701_afe_private *afe_priv = afe->platform_priv;
 
   if (!afe_priv->mrg_enable[!substream->stream])
     {
       regmap_update_bits(afe->regmap, AFE_DAIBT_CON0, AFE_DAIBT_CON0_DAIBT_EN, 0);",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_dlm_fe_hw_params,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt2701_dlm_fe_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   int channels = params_channels(params);
   regmap_update_bits(afe->regmap, AFE_MEMIF_PBUF_SIZE, AFE_MEMIF_PBUF_SIZE_DLM_MASK, AFE_MEMIF_PBUF_SIZE_FULL_INTERLEAVE);
   regmap_update_bits(afe->regmap, AFE_MEMIF_PBUF_SIZE, AFE_MEMIF_PBUF_SIZE_DLM_BYTE_MASK, AFE_MEMIF_PBUF_SIZE_DLM_32BYTES);
   regmap_update_bits(afe->regmap, AFE_MEMIF_PBUF_SIZE, AFE_MEMIF_PBUF_SIZE_DLM_CH_MASK, AFE_MEMIF_PBUF_SIZE_DLM_CH(channels));
   return mtk_afe_fe_hw_params(substream, params, dai);",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_hdmi_shutdown,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static void mt8173_afe_hdmi_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt8173_afe_private *afe_priv = afe->platform_priv;
   if (dai->active)
     return;
   mt8173_afe_dais_disable_clks(afe, afe_priv->clocks[MT8173_CLK_I2S3_M], afe_priv->clocks[MT8173_CLK_I2S3_B]);
 }",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_hdmi_trigger,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt8173_afe_hdmi_trigger(struct snd_pcm_substream *substream, int cmd, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   dev_info(afe->dev, ""%s cmd=%d %s\n"", __func__, cmd, dai->name);
   switch (cmd)
     {
     case SNDRV_PCM_TRIGGER_START:
     case SNDRV_PCM_TRIGGER_RESUME:",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_i2s_prepare,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,11 +1,9 @@
 static int mt8173_afe_i2s_prepare(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
   struct snd_pcm_runtime *const runtime = substream->runtime;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt8173_afe_private *afe_priv = afe->platform_priv;
   int ret;
   mt8173_afe_dais_set_clks(afe, afe_priv->clocks[MT8173_CLK_I2S1_M], runtime->rate * 256, NULL, 0);
   mt8173_afe_dais_set_clks(afe, afe_priv->clocks[MT8173_CLK_I2S2_M], runtime->rate * 256, NULL, 0);
 ",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_afe_i2s_path_shutdown,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt2701_afe_i2s_path_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai, int i2s_num, int dir_invert)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt2701_afe_private *afe_priv = afe->platform_priv;
   struct mt2701_i2s_path *i2s_path = &afe_priv->i2s_path[i2s_num];
   const struct mt2701_i2s_data *i2s_data;
   int stream_dir = substream->stream;
   if (dir_invert)",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_i2s_path_prepare_enable,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt2701_i2s_path_prepare_enable(struct snd_pcm_substream *substream, struct snd_soc_dai *dai, int i2s_num, int dir_invert)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt2701_afe_private *afe_priv = afe->platform_priv;
   struct mt2701_i2s_path *i2s_path = &afe_priv->i2s_path[i2s_num];
   const struct mt2701_i2s_data *i2s_data;
   struct snd_pcm_runtime *const runtime = substream->runtime;
   int reg, fs, w_len = 1;",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_afe_i2s_shutdown,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static void mt2701_afe_i2s_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt2701_afe_private *afe_priv = afe->platform_priv;
   int i2s_num = mt2701_dai_num_to_i2s(afe, dai->id);
   struct mt2701_i2s_path *i2s_path;
   if (i2s_num < 0)
     return;",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_simple_fe_startup,out,0,False,"-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,9 @@
 static int mt2701_simple_fe_startup(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
   struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   int stream_dir = substream->stream;
   int memif_num = rtd->cpu_dai->id;
   struct mtk_base_afe_memif *memif_tmp;
 
   if (stream_dir == SNDRV_PCM_STREAM_PLAYBACK)",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_dlm_fe_shutdown,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static void mt2701_dlm_fe_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   const struct mtk_base_memif_data *memif_data;
   int i;
   for (i = MT2701_MEMIF_DL1; i < MT2701_MEMIF_DL_SINGLE_NUM; ++i)
     {
       memif_data = afe->memif[i].data;",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mtk-afe-fe-dai_mtk_afe_fe_hw_params,out,0,False,"-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,9 @@
 int mtk_afe_fe_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
 {
   struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mtk_base_afe_memif *memif = &afe->memif[rtd->cpu_dai->id];
   int msb_at_bit33 = 0;
   int ret, fs = 0;
   ret = snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(params));
   if (ret < 0)",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_afe_i2s_prepare,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,11 +1,9 @@
 static int mt2701_afe_i2s_prepare(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
   int clk_domain;
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt2701_afe_private *afe_priv = afe->platform_priv;
   int i2s_num = mt2701_dai_num_to_i2s(afe, dai->id);
   struct mt2701_i2s_path *i2s_path;
   int mclk_rate;
   if (i2s_num < 0)",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_hdmi_startup,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt8173_afe_hdmi_startup(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt8173_afe_private *afe_priv = afe->platform_priv;
   if (dai->active)
     return 0;
   mt8173_afe_dais_enable_clks(afe, afe_priv->clocks[MT8173_CLK_I2S3_M], afe_priv->clocks[MT8173_CLK_I2S3_B]);
   return 0;",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_dlm_fe_trigger,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt2701_dlm_fe_trigger(struct snd_pcm_substream *substream, int cmd, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mtk_base_afe_memif *memif_tmp = &afe->memif[MT2701_MEMIF_DL1];
   switch (cmd)
     {
     case SNDRV_PCM_TRIGGER_START:
     case SNDRV_PCM_TRIGGER_RESUME:",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mtk-afe-fe-dai_mtk_afe_fe_prepare,out,0,False,"-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,9 @@
 int mtk_afe_fe_prepare(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
   struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mtk_base_afe_memif *memif = &afe->memif[rtd->cpu_dai->id];
   int hd_audio = 0;
 
   switch (substream->runtime->format)
     {",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_simple_fe_hw_params,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt2701_simple_fe_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   int stream_dir = substream->stream;
 
   if (stream_dir == SNDRV_PCM_STREAM_PLAYBACK)
     {
       regmap_update_bits(afe->regmap, AFE_MEMIF_PBUF_SIZE, AFE_MEMIF_PBUF_SIZE_DLM_MASK, AFE_MEMIF_PBUF_SIZE_PAIR_INTERLEAVE);",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt2701-afe-pcm_mt2701_btmrg_startup,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt2701_btmrg_startup(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt2701_afe_private *afe_priv = afe->platform_priv;
   int ret;
   ret = mt2701_enable_btmrg_clk(afe);
   if (ret)
     return ret;",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_i2s_shutdown,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static void mt8173_afe_i2s_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   if (dai->active)
     return;
   mt8173_afe_set_i2s_enable(afe, false);
   regmap_update_bits(afe->regmap, AUDIO_TOP_CON0, AUD_TCON0_PDN_22M | AUD_TCON0_PDN_24M, AUD_TCON0_PDN_22M | AUD_TCON0_PDN_24M);
 }",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_i2s_startup,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,10 +1,8 @@
 static int mt8173_afe_i2s_startup(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   if (dai->active)
     return 0;
   regmap_update_bits(afe->regmap, AUDIO_TOP_CON0, AUD_TCON0_PDN_22M | AUD_TCON0_PDN_24M, 0);
   return 0;
 }",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./snd_soc,sp_out.final.claude.cocci,1524629994_2018-04-25_e4b31b816c47_mt8173-afe-pcm_mt8173_afe_hdmi_prepare,out,0,False,"-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);",,"--- initial
+++ final
@@ -1,11 +1,9 @@
 static int mt8173_afe_hdmi_prepare(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
 {
-  struct snd_soc_pcm_runtime *rtd = substream->private_data;
   struct snd_pcm_runtime *const runtime = substream->runtime;
-  struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
-  struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+  struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
   struct mt8173_afe_private *afe_priv = afe->platform_priv;
   unsigned int val;
   mt8173_afe_dais_set_clks(afe, afe_priv->clocks[MT8173_CLK_I2S3_M], runtime->rate * 128, afe_priv->clocks[MT8173_CLK_I2S3_B], runtime->rate * runtime->channels * 32);
   val = AFE_TDM_CON1_BCK_INV | AFE_TDM_CON1_LRCK_INV | AFE_TDM_CON1_1_BCK_DELAY | AFE_TDM_CON1_MSB_ALIGNED | AFE_TDM_CON1_WLEN_32BIT | AFE_TDM_CON1_32_BCK_CYCLES | AFE_TDM_CON1_LRCK_WIDTH(32);
   regmap_update_bits(afe->regmap, AFE_TDM_CON1, ~AFE_TDM_CON1_EN, val);",0.0,0.0,./snd_soc/sp_out.final.claude.cocci,0.0,"@@
expression substream, dai, rtd;
identifier component;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai, rtd;
identifier component;
expression const_name;
@@
- rtd = substream->private_data;
- component = snd_soc_rtdcom_lookup(rtd, const_name);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);
@@
expression substream, dai;
identifier component;
@@
  struct snd_soc_pcm_runtime *rtd = substream->private_data;
- struct snd_soc_component *component = snd_soc_rtdcom_lookup(rtd, AFE_PCM_NAME);
- struct mtk_base_afe *afe = snd_soc_component_get_drvdata(component);
+ struct mtk_base_afe *afe = snd_soc_dai_get_drvdata(dai);


"
./ttm_bo_init-60,sp_out.final.claude.cocci,1519311151_2018-02-22_724daa4fd65d_hibmc_ttm_hibmc_bo_create,out,1,True,"-  ret = ttm_bo_init(&hibmc->bdev, &hibmcbo->bo, size, ttm_bo_type_device, &hibmcbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, hibmc_bo_ttm_destroy);
+  ret = ttm_bo_init(&hibmc->bdev, &hibmcbo->bo, size, ttm_bo_type_device, &hibmcbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, hibmc_bo_ttm_destroy);","-  ret = ttm_bo_init(&hibmc->bdev, &hibmcbo->bo, size, ttm_bo_type_device, &hibmcbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, hibmc_bo_ttm_destroy);
+  ret = ttm_bo_init(&hibmc->bdev, &hibmcbo->bo, size, ttm_bo_type_device, &hibmcbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, hibmc_bo_ttm_destroy);","--- initial
+++ final
@@ -18,11 +18,11 @@
       return ret;
     }
   hibmcbo->bo.bdev = &hibmc->bdev;
   hibmc_ttm_placement(hibmcbo, TTM_PL_FLAG_VRAM | TTM_PL_FLAG_SYSTEM);
   acc_size = ttm_bo_dma_acc_size(&hibmc->bdev, size, sizeof(struct hibmc_bo));
-  ret = ttm_bo_init(&hibmc->bdev, &hibmcbo->bo, size, ttm_bo_type_device, &hibmcbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, hibmc_bo_ttm_destroy);
+  ret = ttm_bo_init(&hibmc->bdev, &hibmcbo->bo, size, ttm_bo_type_device, &hibmcbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, hibmc_bo_ttm_destroy);
   if (ret)
     {
       hibmc_bo_unref(&hibmcbo);
       DRM_ERROR(""failed to initialize ttm_bo: %d\n"", ret);
       return ret;",1.0,1.0,./ttm_bo_init-60/sp_out.final.claude.cocci,1.0,"@@ 
expression E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11;
@@
- ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, NULL, E8, E9, E10, E11)
+ ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)


"
./ttm_bo_init-60,sp_out.final.claude.cocci,1519311151_2018-02-22_724daa4fd65d_mgag200_ttm_mgag200_bo_create,out,1,True,"-  ret = ttm_bo_init(&mdev->ttm.bdev, &mgabo->bo, size, ttm_bo_type_device, &mgabo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, mgag200_bo_ttm_destroy);
+  ret = ttm_bo_init(&mdev->ttm.bdev, &mgabo->bo, size, ttm_bo_type_device, &mgabo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, mgag200_bo_ttm_destroy);","-  ret = ttm_bo_init(&mdev->ttm.bdev, &mgabo->bo, size, ttm_bo_type_device, &mgabo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, mgag200_bo_ttm_destroy);
+  ret = ttm_bo_init(&mdev->ttm.bdev, &mgabo->bo, size, ttm_bo_type_device, &mgabo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, mgag200_bo_ttm_destroy);","--- initial
+++ final
@@ -14,11 +14,11 @@
       return ret;
     }
   mgabo->bo.bdev = &mdev->ttm.bdev;
   mgag200_ttm_placement(mgabo, TTM_PL_FLAG_VRAM | TTM_PL_FLAG_SYSTEM);
   acc_size = ttm_bo_dma_acc_size(&mdev->ttm.bdev, size, sizeof(struct mgag200_bo));
-  ret = ttm_bo_init(&mdev->ttm.bdev, &mgabo->bo, size, ttm_bo_type_device, &mgabo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, mgag200_bo_ttm_destroy);
+  ret = ttm_bo_init(&mdev->ttm.bdev, &mgabo->bo, size, ttm_bo_type_device, &mgabo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, mgag200_bo_ttm_destroy);
   if (ret)
     return ret;
   *pmgabo = mgabo;
   return 0;
 }",1.0,1.0,./ttm_bo_init-60/sp_out.final.claude.cocci,1.0,"@@ 
expression E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11;
@@
- ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, NULL, E8, E9, E10, E11)
+ ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)


"
./ttm_bo_init-60,sp_out.final.claude.cocci,1519311151_2018-02-22_724daa4fd65d_bochs_mm_bochs_bo_create,out,1,True,"-  ret = ttm_bo_init(&bochs->ttm.bdev, &bochsbo->bo, size, ttm_bo_type_device, &bochsbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, bochs_bo_ttm_destroy);
+  ret = ttm_bo_init(&bochs->ttm.bdev, &bochsbo->bo, size, ttm_bo_type_device, &bochsbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, bochs_bo_ttm_destroy);","-  ret = ttm_bo_init(&bochs->ttm.bdev, &bochsbo->bo, size, ttm_bo_type_device, &bochsbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, bochs_bo_ttm_destroy);
+  ret = ttm_bo_init(&bochs->ttm.bdev, &bochsbo->bo, size, ttm_bo_type_device, &bochsbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, bochs_bo_ttm_destroy);","--- initial
+++ final
@@ -15,11 +15,11 @@
     }
   bochsbo->bo.bdev = &bochs->ttm.bdev;
   bochsbo->bo.bdev->dev_mapping = dev->anon_inode->i_mapping;
   bochs_ttm_placement(bochsbo, TTM_PL_FLAG_VRAM | TTM_PL_FLAG_SYSTEM);
   acc_size = ttm_bo_dma_acc_size(&bochs->ttm.bdev, size, sizeof(struct bochs_bo));
-  ret = ttm_bo_init(&bochs->ttm.bdev, &bochsbo->bo, size, ttm_bo_type_device, &bochsbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, bochs_bo_ttm_destroy);
+  ret = ttm_bo_init(&bochs->ttm.bdev, &bochsbo->bo, size, ttm_bo_type_device, &bochsbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, bochs_bo_ttm_destroy);
   if (ret)
     return ret;
   *pbochsbo = bochsbo;
   return 0;
 }",1.0,1.0,./ttm_bo_init-60/sp_out.final.claude.cocci,1.0,"@@ 
expression E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11;
@@
- ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, NULL, E8, E9, E10, E11)
+ ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)


"
./ttm_bo_init-60,sp_out.final.claude.cocci,1519311151_2018-02-22_724daa4fd65d_cirrus_ttm_cirrus_bo_create,out,1,True,"-  ret = ttm_bo_init(&cirrus->ttm.bdev, &cirrusbo->bo, size, ttm_bo_type_device, &cirrusbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, cirrus_bo_ttm_destroy);
+  ret = ttm_bo_init(&cirrus->ttm.bdev, &cirrusbo->bo, size, ttm_bo_type_device, &cirrusbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, cirrus_bo_ttm_destroy);","-  ret = ttm_bo_init(&cirrus->ttm.bdev, &cirrusbo->bo, size, ttm_bo_type_device, &cirrusbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, cirrus_bo_ttm_destroy);
+  ret = ttm_bo_init(&cirrus->ttm.bdev, &cirrusbo->bo, size, ttm_bo_type_device, &cirrusbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, cirrus_bo_ttm_destroy);","--- initial
+++ final
@@ -14,11 +14,11 @@
       return ret;
     }
   cirrusbo->bo.bdev = &cirrus->ttm.bdev;
   cirrus_ttm_placement(cirrusbo, TTM_PL_FLAG_VRAM | TTM_PL_FLAG_SYSTEM);
   acc_size = ttm_bo_dma_acc_size(&cirrus->ttm.bdev, size, sizeof(struct cirrus_bo));
-  ret = ttm_bo_init(&cirrus->ttm.bdev, &cirrusbo->bo, size, ttm_bo_type_device, &cirrusbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, cirrus_bo_ttm_destroy);
+  ret = ttm_bo_init(&cirrus->ttm.bdev, &cirrusbo->bo, size, ttm_bo_type_device, &cirrusbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, cirrus_bo_ttm_destroy);
   if (ret)
     return ret;
   *pcirrusbo = cirrusbo;
   return 0;
 }",1.0,1.0,./ttm_bo_init-60/sp_out.final.claude.cocci,1.0,"@@ 
expression E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11;
@@
- ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, NULL, E8, E9, E10, E11)
+ ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)


"
./ttm_bo_init-60,sp_out.final.claude.cocci,1519311151_2018-02-22_724daa4fd65d_vbox_ttm_vbox_bo_create,out,1,True,"-  ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size, ttm_bo_type_device, &vboxbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, vbox_bo_ttm_destroy);
+  ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size, ttm_bo_type_device, &vboxbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, vbox_bo_ttm_destroy);","-  ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size, ttm_bo_type_device, &vboxbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, vbox_bo_ttm_destroy);
+  ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size, ttm_bo_type_device, &vboxbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, vbox_bo_ttm_destroy);","--- initial
+++ final
@@ -11,11 +11,11 @@
   if (ret)
     goto err_free_vboxbo;
   vboxbo->bo.bdev = &vbox->ttm.bdev;
   vbox_ttm_placement(vboxbo, TTM_PL_FLAG_VRAM | TTM_PL_FLAG_SYSTEM);
   acc_size = ttm_bo_dma_acc_size(&vbox->ttm.bdev, size, sizeof(struct vbox_bo));
-  ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size, ttm_bo_type_device, &vboxbo->placement, align >> PAGE_SHIFT, false, NULL, acc_size, NULL, NULL, vbox_bo_ttm_destroy);
+  ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size, ttm_bo_type_device, &vboxbo->placement, align >> PAGE_SHIFT, false, acc_size, NULL, NULL, vbox_bo_ttm_destroy);
   if (ret)
     goto err_free_vboxbo;
   *pvboxbo = vboxbo;
   return 0;
 err_free_vboxbo:",1.0,1.0,./ttm_bo_init-60/sp_out.final.claude.cocci,1.0,"@@ 
expression E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11;
@@
- ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, NULL, E8, E9, E10, E11)
+ ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)


"
./ttm_bo_init-60,sp_out.final.claude.cocci,1519311151_2018-02-22_724daa4fd65d_virtgpu_object_virtio_gpu_object_create,out,1,True,"-  ret = ttm_bo_init(&vgdev->mman.bdev, &bo->tbo, size, type, &bo->placement, 0, !kernel, NULL, acc_size, NULL, NULL, &virtio_gpu_ttm_bo_destroy);
+  ret = ttm_bo_init(&vgdev->mman.bdev, &bo->tbo, size, type, &bo->placement, 0, !kernel, acc_size, NULL, NULL, &virtio_gpu_ttm_bo_destroy);","-  ret = ttm_bo_init(&vgdev->mman.bdev, &bo->tbo, size, type, &bo->placement, 0, !kernel, NULL, acc_size, NULL, NULL, &virtio_gpu_ttm_bo_destroy);
+  ret = ttm_bo_init(&vgdev->mman.bdev, &bo->tbo, size, type, &bo->placement, 0, !kernel, acc_size, NULL, NULL, &virtio_gpu_ttm_bo_destroy);","--- initial
+++ final
@@ -20,11 +20,11 @@
       kfree(bo);
       return ret;
     }
   bo->dumb = false;
   virtio_gpu_init_ttm_placement(bo, pinned);
-  ret = ttm_bo_init(&vgdev->mman.bdev, &bo->tbo, size, type, &bo->placement, 0, !kernel, NULL, acc_size, NULL, NULL, &virtio_gpu_ttm_bo_destroy);
+  ret = ttm_bo_init(&vgdev->mman.bdev, &bo->tbo, size, type, &bo->placement, 0, !kernel, acc_size, NULL, NULL, &virtio_gpu_ttm_bo_destroy);
 
   if (ret != 0)
     return ret;
   *bo_ptr = bo;
   return 0;",1.0,1.0,./ttm_bo_init-60/sp_out.final.claude.cocci,1.0,"@@ 
expression E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11;
@@
- ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, NULL, E8, E9, E10, E11)
+ ttm_bo_init(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)


"
./uartlite,sp_out.final.claude.cocci,1360605874_2013-02-11_6d53c3b71d32_uartlite_ulite_start_tx,out,1,True,"-static void ulite_start_tx(struct uart_port *port) { ulite_transmit(port, ioread32be(port->membase + ULITE_STATUS)); }
+static void ulite_start_tx(struct uart_port *port) { ulite_transmit(port, uart_in32(ULITE_STATUS, port)); }","-static void ulite_start_tx(struct uart_port *port) { ulite_transmit(port, ioread32be(port->membase + ULITE_STATUS)); }
+static void ulite_start_tx(struct uart_port *port) { ulite_transmit(port, uart_in32(ULITE_STATUS, port)); }","--- initial
+++ final
@@ -1 +1 @@
-static void ulite_start_tx(struct uart_port *port) { ulite_transmit(port, ioread32be(port->membase + ULITE_STATUS)); }
+static void ulite_start_tx(struct uart_port *port) { ulite_transmit(port, uart_in32(ULITE_STATUS, port)); }",1.0,1.0,./uartlite/sp_out.final.claude.cocci,1.0,"@@
expression port, reg;
@@
- ioread32be(port->membase + reg)
+ uart_in32(reg, port)


"
./uartlite,sp_out.final.claude.cocci,1360605874_2013-02-11_6d53c3b71d32_uartlite_ulite_tx_empty,out,1,True,"-  ret = ioread32be(port->membase + ULITE_STATUS);
+  ret = uart_in32(ULITE_STATUS, port);","-  ret = ioread32be(port->membase + ULITE_STATUS);
+  ret = uart_in32(ULITE_STATUS, port);","--- initial
+++ final
@@ -1,9 +1,9 @@
 static unsigned int ulite_tx_empty(struct uart_port *port)
 {
   unsigned long flags;
   unsigned int ret;
   spin_lock_irqsave(&port->lock, flags);
-  ret = ioread32be(port->membase + ULITE_STATUS);
+  ret = uart_in32(ULITE_STATUS, port);
   spin_unlock_irqrestore(&port->lock, flags);
   return ret & ULITE_STATUS_TXEMPTY ? TIOCSER_TEMT : 0;
 }",1.0,1.0,./uartlite/sp_out.final.claude.cocci,1.0,"@@
expression port, reg;
@@
- ioread32be(port->membase + reg)
+ uart_in32(reg, port)


"
./uartlite,sp_out.final.claude.cocci,1360605874_2013-02-11_6d53c3b71d32_uartlite_ulite_console_wait_tx,out,1,True,"-      val = ioread32be(port->membase + ULITE_STATUS);
+      val = uart_in32(ULITE_STATUS, port);","-      val = ioread32be(port->membase + ULITE_STATUS);
+      val = uart_in32(ULITE_STATUS, port);","--- initial
+++ final
@@ -3,11 +3,11 @@
   int i;
   u8 val;
 
   for (i = 0; i < 100000; i++)
     {
-      val = ioread32be(port->membase + ULITE_STATUS);
+      val = uart_in32(ULITE_STATUS, port);
       if ((val & ULITE_STATUS_TXFULL) == 0)
         break;
       cpu_relax();
     }
 }",1.0,1.0,./uartlite/sp_out.final.claude.cocci,1.0,"@@
expression port, reg;
@@
- ioread32be(port->membase + reg)
+ uart_in32(reg, port)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_task-exit_test__task_exit,out,1,True,"-  if (perf_evlist__mmap(evlist, 128, false) < 0)
+  if (perf_evlist__mmap(evlist, 128) < 0)","-  if (perf_evlist__mmap(evlist, 128, false) < 0)
+  if (perf_evlist__mmap(evlist, 128) < 0)","--- initial
+++ final
@@ -52,11 +52,11 @@
   if (err < 0)
     {
       pr_debug(""Couldn't open the evlist: %s\n"", str_error_r(-err, sbuf, sizeof(sbuf)));
       goto out_delete_evlist;
     }
-  if (perf_evlist__mmap(evlist, 128, false) < 0)
+  if (perf_evlist__mmap(evlist, 128) < 0)
     {
       pr_debug(""failed to mmap events: %d (%s)\n"", errno, str_error_r(errno, sbuf, sizeof(sbuf)));
       goto out_delete_evlist;
     }
   perf_evlist__start_workload(evlist);",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_openat-syscall-tp-fields_test__syscall_openat_tp_fields,out,1,True,"-  err = perf_evlist__mmap(evlist, UINT_MAX, false);
+  err = perf_evlist__mmap(evlist, UINT_MAX);","-  err = perf_evlist__mmap(evlist, UINT_MAX, false);
+  err = perf_evlist__mmap(evlist, UINT_MAX);","--- initial
+++ final
@@ -41,11 +41,11 @@
   if (err < 0)
     {
       pr_debug(""perf_evlist__open: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       goto out_delete_evlist;
     }
-  err = perf_evlist__mmap(evlist, UINT_MAX, false);
+  err = perf_evlist__mmap(evlist, UINT_MAX);
   if (err < 0)
     {
       pr_debug(""perf_evlist__mmap: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       goto out_delete_evlist;
     }",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_builtin-trace_trace__run,out,1,True,"-  err = perf_evlist__mmap(evlist, trace->opts.mmap_pages, false);
+  err = perf_evlist__mmap(evlist, trace->opts.mmap_pages);","-  err = perf_evlist__mmap(evlist, trace->opts.mmap_pages, false);
+  err = perf_evlist__mmap(evlist, trace->opts.mmap_pages);","--- initial
+++ final
@@ -102,11 +102,11 @@
       pr_debug(""event qualifier tracepoint filter: %s\n"", trace->syscalls.events.sys_exit->filter);
     }
   err = perf_evlist__apply_filters(evlist, &evsel);
   if (err < 0)
     goto out_error_apply_filters;
-  err = perf_evlist__mmap(evlist, trace->opts.mmap_pages, false);
+  err = perf_evlist__mmap(evlist, trace->opts.mmap_pages);
   if (err < 0)
     goto out_error_mmap;
   if (!target__none(&trace->opts.target) && !trace->opts.initial_delay)
     perf_evlist__enable(evlist);
   if (forks)",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_python_pyrf_evlist__mmap,out,1,True,"-  if (perf_evlist__mmap(evlist, pages, overwrite) < 0)
+  if (perf_evlist__mmap(evlist, pages) < 0)","-  if (perf_evlist__mmap(evlist, pages, overwrite) < 0)
+  if (perf_evlist__mmap(evlist, pages) < 0)","--- initial
+++ final
@@ -3,11 +3,11 @@
   struct perf_evlist *evlist = &pevlist->evlist;
   static char *kwlist[] = {""pages"", ""overwrite"", NULL};
   int pages = 128, overwrite = false;
   if (!PyArg_ParseTupleAndKeywords(args, kwargs, ""|ii"", kwlist, &pages, &overwrite))
     return NULL;
-  if (perf_evlist__mmap(evlist, pages, overwrite) < 0)
+  if (perf_evlist__mmap(evlist, pages) < 0)
     {
       PyErr_SetFromErrno(PyExc_OSError);
       return NULL;
     }
   Py_INCREF(Py_None);",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_backward-ring-buffer_do_test,out,1,True,"-  err = perf_evlist__mmap(evlist, mmap_pages, false);
+  err = perf_evlist__mmap(evlist, mmap_pages);","-  err = perf_evlist__mmap(evlist, mmap_pages, false);
+  err = perf_evlist__mmap(evlist, mmap_pages);","--- initial
+++ final
@@ -1,10 +1,10 @@
 static int do_test(struct perf_evlist *evlist, int mmap_pages, int *sample_count, int *comm_count)
 {
   int err;
   char sbuf[STRERR_BUFSIZE];
-  err = perf_evlist__mmap(evlist, mmap_pages, false);
+  err = perf_evlist__mmap(evlist, mmap_pages);
   if (err < 0)
     {
       pr_debug(""perf_evlist__mmap: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       return TEST_FAIL;
     }",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_perf-record_test__PERF_RECORD,out,1,True,"-  err = perf_evlist__mmap(evlist, opts.mmap_pages, false);
+  err = perf_evlist__mmap(evlist, opts.mmap_pages);","-  err = perf_evlist__mmap(evlist, opts.mmap_pages, false);
+  err = perf_evlist__mmap(evlist, opts.mmap_pages);","--- initial
+++ final
@@ -75,11 +75,11 @@
     {
       pr_debug(""perf_evlist__open: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       goto out_delete_evlist;
     }
 
-  err = perf_evlist__mmap(evlist, opts.mmap_pages, false);
+  err = perf_evlist__mmap(evlist, opts.mmap_pages);
   if (err < 0)
     {
       pr_debug(""perf_evlist__mmap: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       goto out_delete_evlist;
     }",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_perf-time-to-tsc_test__perf_time_to_tsc,out,1,True,"-  CHECK__(perf_evlist__mmap(evlist, UINT_MAX, false));
+  CHECK__(perf_evlist__mmap(evlist, UINT_MAX));","-  CHECK__(perf_evlist__mmap(evlist, UINT_MAX, false));
+  CHECK__(perf_evlist__mmap(evlist, UINT_MAX));","--- initial
+++ final
@@ -33,11 +33,11 @@
   evsel = perf_evlist__first(evlist);
   evsel->attr.comm = 1;
   evsel->attr.disabled = 1;
   evsel->attr.enable_on_exec = 0;
   CHECK__(perf_evlist__open(evlist));
-  CHECK__(perf_evlist__mmap(evlist, UINT_MAX, false));
+  CHECK__(perf_evlist__mmap(evlist, UINT_MAX));
   pc = evlist->mmap[0].base;
   ret = perf_read_tsc_conversion(pc, &tc);
   if (ret)
     {
       if (ret == -EOPNOTSUPP)",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_builtin-kvm_kvm_live_open_events,out,1,True,"-  if (perf_evlist__mmap(evlist, kvm->opts.mmap_pages, false) < 0)
+  if (perf_evlist__mmap(evlist, kvm->opts.mmap_pages) < 0)","-  if (perf_evlist__mmap(evlist, kvm->opts.mmap_pages, false) < 0)
+  if (perf_evlist__mmap(evlist, kvm->opts.mmap_pages) < 0)","--- initial
+++ final
@@ -33,11 +33,11 @@
   if (err < 0)
     {
       printf(""Couldn't create the events: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       goto out;
     }
-  if (perf_evlist__mmap(evlist, kvm->opts.mmap_pages, false) < 0)
+  if (perf_evlist__mmap(evlist, kvm->opts.mmap_pages) < 0)
     {
       ui__error(""Failed to mmap the events: %s\n"", str_error_r(errno, sbuf, sizeof(sbuf)));
       perf_evlist__close(evlist);
       goto out;
     }",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_switch-tracking_test__switch_tracking,out,1,True,"-  err = perf_evlist__mmap(evlist, UINT_MAX, false);
+  err = perf_evlist__mmap(evlist, UINT_MAX);","-  err = perf_evlist__mmap(evlist, UINT_MAX, false);
+  err = perf_evlist__mmap(evlist, UINT_MAX);","--- initial
+++ final
@@ -131,11 +131,11 @@
     {
       pr_debug(""Not supported\n"");
       err = 0;
       goto out;
     }
-  err = perf_evlist__mmap(evlist, UINT_MAX, false);
+  err = perf_evlist__mmap(evlist, UINT_MAX);
   if (err)
     {
       pr_debug(""perf_evlist__mmap failed!\n"");
       goto out_err;
     }",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_builtin-top_perf_top__start_counters,out,1,True,"-  if (perf_evlist__mmap(evlist, opts->mmap_pages, false) < 0)
+  if (perf_evlist__mmap(evlist, opts->mmap_pages) < 0)","-  if (perf_evlist__mmap(evlist, opts->mmap_pages, false) < 0)
+  if (perf_evlist__mmap(evlist, opts->mmap_pages) < 0)","--- initial
+++ final
@@ -19,11 +19,11 @@
         perf_evsel__open_strerror(counter, &opts->target, errno, msg, sizeof(msg));
         ui__error(""%s\n"", msg);
         goto out_err;
       }
   }
-  if (perf_evlist__mmap(evlist, opts->mmap_pages, false) < 0)
+  if (perf_evlist__mmap(evlist, opts->mmap_pages) < 0)
     {
       ui__error(""Failed to mmap with %d (%s)\n"", errno, str_error_r(errno, msg, sizeof(msg)));
       goto out_err;
     }
   return 0;",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./perf_evlist__mmap-69,sp_out.final.claude.cocci,1512266437_2017-12-03_f74b9d3a1ac2_keep-tracking_test__keep_tracking,out,1,True,"-  CHECK__(perf_evlist__mmap(evlist, UINT_MAX, false));
+  CHECK__(perf_evlist__mmap(evlist, UINT_MAX));","-  CHECK__(perf_evlist__mmap(evlist, UINT_MAX, false));
+  CHECK__(perf_evlist__mmap(evlist, UINT_MAX));","--- initial
+++ final
@@ -33,11 +33,11 @@
     {
       pr_debug(""Unable to open dummy and cycles event\n"");
       err = TEST_SKIP;
       goto out_err;
     }
-  CHECK__(perf_evlist__mmap(evlist, UINT_MAX, false));
+  CHECK__(perf_evlist__mmap(evlist, UINT_MAX));
 
   perf_evlist__enable(evlist);
   comm = ""Test COMM 1"";
   CHECK__(prctl(PR_SET_NAME, (unsigned long)comm, 0, 0, 0));
   perf_evlist__disable(evlist);",1.0,1.0,./perf_evlist__mmap-69/sp_out.final.claude.cocci,1.0,"@@
expression evlist, pages;
expression flag;
@@
- perf_evlist__mmap(evlist, pages, flag)
+ perf_evlist__mmap(evlist, pages)


"
./early_memunmap,sp_out.final.claude.cocci,1424769208_2015-02-24_8d4a40b_e820_parse_e820_ext,out,1,True,"-  early_iounmap(sdata, data_len);
+  early_memunmap(sdata, data_len);","-  early_iounmap(sdata, data_len);
+  early_memunmap(sdata, data_len);","--- initial
+++ final
@@ -6,9 +6,9 @@
   sdata = early_memremap(phys_addr, data_len);
   entries = sdata->len / sizeof(struct e820entry);
   extmap = (struct e820entry *)(sdata->data);
   __append_e820_map(extmap, entries);
   sanitize_e820_map(e820.map, ARRAY_SIZE(e820.map), &e820.nr_map);
-  early_iounmap(sdata, data_len);
+  early_memunmap(sdata, data_len);
   printk(KERN_INFO ""e820: extended physical RAM map:\n"");
   e820_print_map(""extended"");
 }",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1402317686_2014-06-09_98a716b_quirks_efi_reuse_config,out,1,True,"-  early_iounmap(tablep, nr_tables * sz);
-  early_iounmap(data, sizeof(*data));
+  early_memunmap(tablep, nr_tables * sz);
+  early_memunmap(data, sizeof(*data));","-  early_iounmap(tablep, nr_tables * sz);
-  early_iounmap(data, sizeof(*data));
+  early_memunmap(tablep, nr_tables * sz);
+  early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -29,11 +29,11 @@
       guid = ((efi_config_table_64_t *)p)->guid;
       if (!efi_guidcmp(guid, SMBIOS_TABLE_GUID))
         ((efi_config_table_64_t *)p)->table = data->smbios;
       p += sz;
     }
-  early_iounmap(tablep, nr_tables * sz);
+  early_memunmap(tablep, nr_tables * sz);
 out_memremap:
-  early_iounmap(data, sizeof(*data));
+  early_memunmap(data, sizeof(*data));
 out:
   return ret;
 }",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1424769208_2015-02-24_8d4a40b_setup_e820_reserve_setup_data,out,1,True,"-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -8,11 +8,11 @@
     {
       data = early_memremap(pa_data, sizeof(*data));
       e820_update_range(pa_data, sizeof(*data) + data->len, E820_RAM, E820_RESERVED_KERN);
       found = 1;
       pa_data = data->next;
-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));
     }
   if (!found)
     return;
   sanitize_e820_map(e820.map, ARRAY_SIZE(e820.map), &e820.nr_map);
   memcpy(&e820_saved, &e820, sizeof(struct e820map));",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1424769208_2015-02-24_8d4a40b_setup_parse_setup_data,out,1,True,"-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -8,11 +8,11 @@
       u32 data_len, data_type;
       data = early_memremap(pa_data, sizeof(*data));
       data_len = data->len + sizeof(struct setup_data);
       data_type = data->type;
       pa_next = data->next;
-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));
       switch (data_type)
         {
         case SETUP_E820_EXT:
           parse_e820_ext(pa_data, data_len);
           break;",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1402317686_2014-06-09_98a716b66cab_quirks_efi_reuse_config,out,1,True,"-  early_iounmap(tablep, nr_tables * sz);
-  early_iounmap(data, sizeof(*data));
+  early_memunmap(tablep, nr_tables * sz);
+  early_memunmap(data, sizeof(*data));","-  early_iounmap(tablep, nr_tables * sz);
-  early_iounmap(data, sizeof(*data));
+  early_memunmap(tablep, nr_tables * sz);
+  early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -29,11 +29,11 @@
       guid = ((efi_config_table_64_t *)p)->guid;
       if (!efi_guidcmp(guid, SMBIOS_TABLE_GUID))
         ((efi_config_table_64_t *)p)->table = data->smbios;
       p += sz;
     }
-  early_iounmap(tablep, nr_tables * sz);
+  early_memunmap(tablep, nr_tables * sz);
 out_memremap:
-  early_iounmap(data, sizeof(*data));
+  early_memunmap(data, sizeof(*data));
 out:
   return ret;
 }",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1424769208_2015-02-24_8d4a40bc0651_setup_memblock_x86_reserve_range_setup_data,out,1,True,"-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -6,8 +6,8 @@
   while (pa_data)
     {
       data = early_memremap(pa_data, sizeof(*data));
       memblock_reserve(pa_data, sizeof(*data) + data->len);
       pa_data = data->next;
-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));
     }
 }",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1424769208_2015-02-24_8d4a40bc0651_setup_e820_reserve_setup_data,out,1,True,"-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -8,11 +8,11 @@
     {
       data = early_memremap(pa_data, sizeof(*data));
       e820_update_range(pa_data, sizeof(*data) + data->len, E820_RAM, E820_RESERVED_KERN);
       found = 1;
       pa_data = data->next;
-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));
     }
   if (!found)
     return;
   sanitize_e820_map(e820.map, ARRAY_SIZE(e820.map), &e820.nr_map);
   memcpy(&e820_saved, &e820, sizeof(struct e820map));",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./early_memunmap,sp_out.final.claude.cocci,1424769208_2015-02-24_8d4a40b_setup_memblock_x86_reserve_range_setup_data,out,1,True,"-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));","--- initial
+++ final
@@ -6,8 +6,8 @@
   while (pa_data)
     {
       data = early_memremap(pa_data, sizeof(*data));
       memblock_reserve(pa_data, sizeof(*data) + data->len);
       pa_data = data->next;
-      early_iounmap(data, sizeof(*data));
+      early_memunmap(data, sizeof(*data));
     }
 }",1.0,1.0,./early_memunmap/sp_out.final.claude.cocci,1.0,"@@
expression addr, size;
@@
- early_iounmap(addr, size)
+ early_memunmap(addr, size)


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_clocksource_clocksource_start_watchdog,out,1,False,"-  init_timer(&watchdog_timer);
-  watchdog_timer.function = clocksource_watchdog;
+  setup_timer(&watchdog_timer, clocksource_watchdog, 0UL);",,"--- initial
+++ final
@@ -1,10 +1,9 @@
 static inline void clocksource_start_watchdog(void)
 {
   if (watchdog_running || !watchdog || list_empty(&watchdog_list))
     return;
-  init_timer(&watchdog_timer);
-  watchdog_timer.function = clocksource_watchdog;
+  setup_timer(&watchdog_timer, clocksource_watchdog, 0UL);
   watchdog_timer.expires = jiffies + WATCHDOG_INTERVAL;
   add_timer_on(&watchdog_timer, cpumask_first(cpu_online_mask));
   watchdog_running = 1;
 }",0.0,0.0,./kees_timer1/sp_out.final.claude.cocci,0.3333333333333333,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_ncr53c8xx_ncr_attach,out,1,True,"-  init_timer(&np->timer);
-  np->timer.data = (unsigned long)np;
-  np->timer.function = ncr53c8xx_timeout;
+  setup_timer(&np->timer, ncr53c8xx_timeout, (unsigned long)np);","-  init_timer(&np->timer);
-  np->timer.data = (unsigned long)np;
-  np->timer.function = ncr53c8xx_timeout;
+  setup_timer(&np->timer, ncr53c8xx_timeout, (unsigned long)np);","--- initial
+++ final
@@ -50,13 +50,11 @@
   if (!np->script0)
     goto attach_error;
   np->scripth0 = m_calloc_dma(sizeof(struct scripth), ""SCRIPTH"");
   if (!np->scripth0)
     goto attach_error;
-  init_timer(&np->timer);
-  np->timer.data = (unsigned long)np;
-  np->timer.function = ncr53c8xx_timeout;
+  setup_timer(&np->timer, ncr53c8xx_timeout, (unsigned long)np);
 
   np->paddr = device->slot.base;
   np->paddr2 = (np->features & FE_RAM) ? device->slot.base_2 : 0;
   if (device->slot.base_v)
     np->vaddr = device->slot.base_v;",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_esas2r_main_esas2r_kickoff_timer,out,1,True,"-  init_timer(&a->timer);
-  a->timer.function = esas2r_timer_callback;
-  a->timer.data = (unsigned long)a;
+  setup_timer(&a->timer, esas2r_timer_callback, (unsigned long)a);",,"--- initial
+++ final
@@ -1,8 +1,6 @@
 void esas2r_kickoff_timer(struct esas2r_adapter *a)
 {
-  init_timer(&a->timer);
-  a->timer.function = esas2r_timer_callback;
-  a->timer.data = (unsigned long)a;
+  setup_timer(&a->timer, esas2r_timer_callback, (unsigned long)a);
   a->timer.expires = jiffies + msecs_to_jiffies(100);
   add_timer(&a->timer);
 }",0.0,0.0,./kees_timer1/sp_out.final.claude.cocci,0.3333333333333333,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_dsi_dsi_bind,out,1,True,"-  init_timer(&dsi->te_timer);
-  dsi->te_timer.function = dsi_te_timeout;
-  dsi->te_timer.data = 0;
+  setup_timer(&dsi->te_timer, dsi_te_timeout, 0);",,"--- initial
+++ final
@@ -22,13 +22,11 @@
 #endif
   mutex_init(&dsi->lock);
   sema_init(&dsi->bus_lock, 1);
   INIT_DEFERRABLE_WORK(&dsi->framedone_timeout_work, dsi_framedone_timeout_work_callback);
 #ifdef DSI_CATCH_MISSING_TE
-  init_timer(&dsi->te_timer);
-  dsi->te_timer.function = dsi_te_timeout;
-  dsi->te_timer.data = 0;
+  setup_timer(&dsi->te_timer, dsi_te_timeout, 0);
 #endif
   dsi_mem = platform_get_resource_byname(dsidev, IORESOURCE_MEM, ""proto"");
   dsi->proto_base = devm_ioremap_resource(&dsidev->dev, dsi_mem);
   if (IS_ERR(dsi->proto_base))
     return PTR_ERR(dsi->proto_base);",0.0,0.0,./kees_timer1/sp_out.final.claude.cocci,0.3333333333333333,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_common_pcibios_enable_timers,out,1,True,"-      init_timer(&hose->err_timer);
-      hose->err_timer.data = (unsigned long)hose;
-      hose->err_timer.function = pcibios_enable_err;
-      init_timer(&hose->serr_timer);
-      hose->serr_timer.data = (unsigned long)hose;
-      hose->serr_timer.function = pcibios_enable_serr;
+      setup_timer(&hose->err_timer, pcibios_enable_err, (unsigned long)hose);
+      setup_timer(&hose->serr_timer, pcibios_enable_serr, (unsigned long)hose);","-      init_timer(&hose->err_timer);
-      hose->err_timer.data = (unsigned long)hose;
-      hose->err_timer.function = pcibios_enable_err;
-      init_timer(&hose->serr_timer);
-      hose->serr_timer.data = (unsigned long)hose;
-      hose->serr_timer.function = pcibios_enable_serr;
+      setup_timer(&hose->err_timer, pcibios_enable_err, (unsigned long)hose);
+      setup_timer(&hose->serr_timer, pcibios_enable_serr, (unsigned long)hose);","--- initial
+++ final
@@ -1,15 +1,11 @@
 void pcibios_enable_timers(struct pci_channel *hose)
 {
   if (hose->err_irq)
     {
-      init_timer(&hose->err_timer);
-      hose->err_timer.data = (unsigned long)hose;
-      hose->err_timer.function = pcibios_enable_err;
+      setup_timer(&hose->err_timer, pcibios_enable_err, (unsigned long)hose);
     }
   if (hose->serr_irq)
     {
-      init_timer(&hose->serr_timer);
-      hose->serr_timer.data = (unsigned long)hose;
-      hose->serr_timer.function = pcibios_enable_serr;
+      setup_timer(&hose->serr_timer, pcibios_enable_serr, (unsigned long)hose);
     }
 }",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_sym_glue_sym_attach,out,1,True,"-  init_timer(&np->s.timer);
-  np->s.timer.data = (unsigned long)np;
-  np->s.timer.function = sym53c8xx_timer;
+  setup_timer(&np->s.timer, sym53c8xx_timer, (unsigned long)np);","-  init_timer(&np->s.timer);
-  np->s.timer.data = (unsigned long)np;
-  np->s.timer.function = sym53c8xx_timer;
+  setup_timer(&np->s.timer, sym53c8xx_timer, (unsigned long)np);","--- initial
+++ final
@@ -64,13 +64,11 @@
   if (sym_reset_scsi_bus(np, 0))
     goto reset_failed;
 
   sym_start_up(shost, 1);
 
-  init_timer(&np->s.timer);
-  np->s.timer.data = (unsigned long)np;
-  np->s.timer.function = sym53c8xx_timer;
+  setup_timer(&np->s.timer, sym53c8xx_timer, (unsigned long)np);
   np->s.lasttime = 0;
   sym_timer(np);
 
   shost->max_channel = 0;
   shost->this_id = np->myaddr;",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_hostap_hw_prism2_init_local_data,out,1,True,"-  init_timer(&local->passive_scan_timer);
-  local->passive_scan_timer.data = (unsigned long)local;
-  local->passive_scan_timer.function = hostap_passive_scan;
-  init_timer(&local->tick_timer);
-  local->tick_timer.data = (unsigned long)local;
-  local->tick_timer.function = hostap_tick_timer;
+  setup_timer(&local->passive_scan_timer, hostap_passive_scan, (unsigned long)local);
+  setup_timer(&local->tick_timer, hostap_tick_timer, (unsigned long)local);","-  init_timer(&local->passive_scan_timer);
-  local->passive_scan_timer.data = (unsigned long)local;
-  local->passive_scan_timer.function = hostap_passive_scan;
-  init_timer(&local->tick_timer);
-  local->tick_timer.data = (unsigned long)local;
-  local->tick_timer.function = hostap_tick_timer;
+  setup_timer(&local->passive_scan_timer, hostap_passive_scan, (unsigned long)local);
+  setup_timer(&local->tick_timer, hostap_tick_timer, (unsigned long)local);","--- initial
+++ final
@@ -108,16 +108,12 @@
   HOSTAP_TASKLET_INIT(&local->sta_tx_exc_tasklet, hostap_sta_tx_exc_tasklet, (unsigned long)local);
   skb_queue_head_init(&local->sta_tx_exc_list);
   INIT_LIST_HEAD(&local->cmd_queue);
   init_waitqueue_head(&local->hostscan_wq);
   lib80211_crypt_info_init(&local->crypt_info, dev->name, &local->lock);
-  init_timer(&local->passive_scan_timer);
-  local->passive_scan_timer.data = (unsigned long)local;
-  local->passive_scan_timer.function = hostap_passive_scan;
-  init_timer(&local->tick_timer);
-  local->tick_timer.data = (unsigned long)local;
-  local->tick_timer.function = hostap_tick_timer;
+  setup_timer(&local->passive_scan_timer, hostap_passive_scan, (unsigned long)local);
+  setup_timer(&local->tick_timer, hostap_tick_timer, (unsigned long)local);
   local->tick_timer.expires = jiffies + 2 * HZ;
   add_timer(&local->tick_timer);
   INIT_LIST_HEAD(&local->bss_list);
   hostap_setup_dev(dev, local, HOSTAP_INTERFACE_MASTER);
   dev->type = ARPHRD_IEEE80211;",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_pn533_pn533_register_device,out,1,True,"-  init_timer(&priv->listen_timer);
-  priv->listen_timer.data = (unsigned long)priv;
-  priv->listen_timer.function = pn533_listen_mode_timer;
+  setup_timer(&priv->listen_timer, pn533_listen_mode_timer, (unsigned long)priv);","-  init_timer(&priv->listen_timer);
-  priv->listen_timer.data = (unsigned long)priv;
-  priv->listen_timer.function = pn533_listen_mode_timer;
+  setup_timer(&priv->listen_timer, pn533_listen_mode_timer, (unsigned long)priv);","--- initial
+++ final
@@ -25,13 +25,11 @@
   INIT_DELAYED_WORK(&priv->poll_work, pn533_wq_poll);
   INIT_WORK(&priv->rf_work, pn533_wq_rf);
   priv->wq = alloc_ordered_workqueue(""pn533"", 0);
   if (priv->wq == NULL)
     goto error;
-  init_timer(&priv->listen_timer);
-  priv->listen_timer.data = (unsigned long)priv;
-  priv->listen_timer.function = pn533_listen_mode_timer;
+  setup_timer(&priv->listen_timer, pn533_listen_mode_timer, (unsigned long)priv);
   skb_queue_head_init(&priv->resp_q);
   skb_queue_head_init(&priv->fragment_skb);
   INIT_LIST_HEAD(&priv->cmd_queue);
   priv->nfc_dev = nfc_allocate_device(&pn533_nfc_ops, protocols, priv->ops->tx_header_len + PN533_CMD_DATAEXCH_HEAD_LEN, priv->ops->tx_tail_len);
   if (!priv->nfc_dev)",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_umem_init_battery_timer,out,1,False,"-  init_timer(&battery_timer);
-  battery_timer.function = check_all_batteries;
+  setup_timer(&battery_timer, check_all_batteries, 0UL);",,"--- initial
+++ final
@@ -1,7 +1,6 @@
 static void init_battery_timer(void)
 {
-  init_timer(&battery_timer);
-  battery_timer.function = check_all_batteries;
+  setup_timer(&battery_timer, check_all_batteries, 0UL);
   battery_timer.expires = jiffies + (HZ * 60);
   add_timer(&battery_timer);
 }",0.0,0.0,./kees_timer1/sp_out.final.claude.cocci,0.3333333333333333,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_dasd_dasd_alloc_block,out,1,True,"-  init_timer(&block->timer);
-  block->timer.function = dasd_block_timeout;
-  block->timer.data = (unsigned long)block;
+  setup_timer(&block->timer, dasd_block_timeout, (unsigned long)block);",,"--- initial
+++ final
@@ -8,11 +8,9 @@
   atomic_set(&block->open_count, -1);
   atomic_set(&block->tasklet_scheduled, 0);
   tasklet_init(&block->tasklet, (void (*)(unsigned long))dasd_block_tasklet, (unsigned long)block);
   INIT_LIST_HEAD(&block->ccw_queue);
   spin_lock_init(&block->queue_lock);
-  init_timer(&block->timer);
-  block->timer.function = dasd_block_timeout;
-  block->timer.data = (unsigned long)block;
+  setup_timer(&block->timer, dasd_block_timeout, (unsigned long)block);
   spin_lock_init(&block->profile.lock);
   return block;
 }",0.0,0.0,./kees_timer1/sp_out.final.claude.cocci,0.3333333333333333,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_firestream_fs_init,out,1,True,"-  init_timer(&dev->timer);
-  dev->timer.data = (unsigned long)dev;
-  dev->timer.function = fs_poll;
+  setup_timer(&dev->timer, fs_poll, (unsigned long)dev);","-  init_timer(&dev->timer);
-  dev->timer.data = (unsigned long)dev;
-  dev->timer.function = fs_poll;
+  setup_timer(&dev->timer, fs_poll, (unsigned long)dev);","--- initial
+++ final
@@ -114,13 +114,11 @@
   if (loopback == 2)
     {
       write_phy(dev, 0x39, 0x000e);
     }
 #ifdef FS_POLL_FREQ
-  init_timer(&dev->timer);
-  dev->timer.data = (unsigned long)dev;
-  dev->timer.function = fs_poll;
+  setup_timer(&dev->timer, fs_poll, (unsigned long)dev);
   dev->timer.expires = jiffies + FS_POLL_FREQ;
   add_timer(&dev->timer);
 #endif
   dev->atm_dev->dev_data = dev;
 ",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_ndlc_ndlc_probe,out,1,True,"-  init_timer(&ndlc->t1_timer);
-  ndlc->t1_timer.data = (unsigned long)ndlc;
-  ndlc->t1_timer.function = ndlc_t1_timeout;
-  init_timer(&ndlc->t2_timer);
-  ndlc->t2_timer.data = (unsigned long)ndlc;
-  ndlc->t2_timer.function = ndlc_t2_timeout;
+  setup_timer(&ndlc->t1_timer, ndlc_t1_timeout, (unsigned long)ndlc);
+  setup_timer(&ndlc->t2_timer, ndlc_t2_timeout, (unsigned long)ndlc);","-  init_timer(&ndlc->t1_timer);
-  ndlc->t1_timer.data = (unsigned long)ndlc;
-  ndlc->t1_timer.function = ndlc_t1_timeout;
-  init_timer(&ndlc->t2_timer);
-  ndlc->t2_timer.data = (unsigned long)ndlc;
-  ndlc->t2_timer.function = ndlc_t2_timeout;
+  setup_timer(&ndlc->t1_timer, ndlc_t1_timeout, (unsigned long)ndlc);
+  setup_timer(&ndlc->t2_timer, ndlc_t2_timeout, (unsigned long)ndlc);","--- initial
+++ final
@@ -8,16 +8,12 @@
   ndlc->phy_id = phy_id;
   ndlc->dev = dev;
   ndlc->powered = 0;
   *ndlc_id = ndlc;
 
-  init_timer(&ndlc->t1_timer);
-  ndlc->t1_timer.data = (unsigned long)ndlc;
-  ndlc->t1_timer.function = ndlc_t1_timeout;
-  init_timer(&ndlc->t2_timer);
-  ndlc->t2_timer.data = (unsigned long)ndlc;
-  ndlc->t2_timer.function = ndlc_t2_timeout;
+  setup_timer(&ndlc->t1_timer, ndlc_t1_timeout, (unsigned long)ndlc);
+  setup_timer(&ndlc->t2_timer, ndlc_t2_timeout, (unsigned long)ndlc);
   skb_queue_head_init(&ndlc->rcv_q);
   skb_queue_head_init(&ndlc->send_q);
   skb_queue_head_init(&ndlc->ack_pending_q);
   INIT_WORK(&ndlc->sm_work, llt_ndlc_sm_work);
   return st_nci_probe(ndlc, phy_headroom, phy_tailroom, se_status);",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_omap_udc_omap_ep_setup,out,1,True,"-      init_timer(&ep->timer);
-      ep->timer.function = pio_out_timer;
-      ep->timer.data = (unsigned long)ep;
+      setup_timer(&ep->timer, pio_out_timer, (unsigned long)ep);",,"--- initial
+++ final
@@ -62,13 +62,11 @@
         default:
           BUG();
         }
       if (dbuf && addr)
         epn_rxtx |= UDC_EPN_RX_DB;
-      init_timer(&ep->timer);
-      ep->timer.function = pio_out_timer;
-      ep->timer.data = (unsigned long)ep;
+      setup_timer(&ep->timer, pio_out_timer, (unsigned long)ep);
     }
   if (addr)
     epn_rxtx |= UDC_EPN_RX_VALID;
   BUG_ON(buf & 0x07);
   epn_rxtx |= buf >> 3;",0.0,0.0,./kees_timer1/sp_out.final.claude.cocci,0.3333333333333333,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_se_st21nfca_se_init,out,1,True,"-  init_timer(&info->se_info.bwi_timer);
-  info->se_info.bwi_timer.data = (unsigned long)info;
-  info->se_info.bwi_timer.function = st21nfca_se_wt_timeout;
-  init_timer(&info->se_info.se_active_timer);
-  info->se_info.se_active_timer.data = (unsigned long)info;
-  info->se_info.se_active_timer.function = st21nfca_se_activation_timeout;
+  setup_timer(&info->se_info.bwi_timer, st21nfca_se_wt_timeout, (unsigned long)info);
+  setup_timer(&info->se_info.se_active_timer, st21nfca_se_activation_timeout, (unsigned long)info);","-  init_timer(&info->se_info.bwi_timer);
-  info->se_info.bwi_timer.data = (unsigned long)info;
-  info->se_info.bwi_timer.function = st21nfca_se_wt_timeout;
-  init_timer(&info->se_info.se_active_timer);
-  info->se_info.se_active_timer.data = (unsigned long)info;
-  info->se_info.se_active_timer.function = st21nfca_se_activation_timeout;
+  setup_timer(&info->se_info.bwi_timer, st21nfca_se_wt_timeout, (unsigned long)info);
+  setup_timer(&info->se_info.se_active_timer, st21nfca_se_activation_timeout, (unsigned long)info);","--- initial
+++ final
@@ -1,17 +1,13 @@
 void st21nfca_se_init(struct nfc_hci_dev *hdev)
 {
   struct st21nfca_hci_info *info = nfc_hci_get_clientdata(hdev);
   init_completion(&info->se_info.req_completion);
 
-  init_timer(&info->se_info.bwi_timer);
-  info->se_info.bwi_timer.data = (unsigned long)info;
-  info->se_info.bwi_timer.function = st21nfca_se_wt_timeout;
+  setup_timer(&info->se_info.bwi_timer, st21nfca_se_wt_timeout, (unsigned long)info);
   info->se_info.bwi_active = false;
-  init_timer(&info->se_info.se_active_timer);
-  info->se_info.se_active_timer.data = (unsigned long)info;
-  info->se_info.se_active_timer.function = st21nfca_se_activation_timeout;
+  setup_timer(&info->se_info.se_active_timer, st21nfca_se_activation_timeout, (unsigned long)info);
   info->se_info.se_active = false;
   info->se_info.count_pipes = 0;
   info->se_info.expected_pipes = 0;
   info->se_info.xch_error = false;
   info->se_info.wt_timeout = ST21NFCA_BWI_TO_TIMEOUT(ST21NFCA_ATR_DEFAULT_BWI);",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_s5p_mfc_s5p_mfc_probe,out,1,True,"-  init_timer(&dev->watchdog_timer);
-  dev->watchdog_timer.data = (unsigned long)dev;
-  dev->watchdog_timer.function = s5p_mfc_watchdog;
+  setup_timer(&dev->watchdog_timer, s5p_mfc_watchdog, (unsigned long)dev);","-  init_timer(&dev->watchdog_timer);
-  dev->watchdog_timer.data = (unsigned long)dev;
-  dev->watchdog_timer.function = s5p_mfc_watchdog;
+  setup_timer(&dev->watchdog_timer, s5p_mfc_watchdog, (unsigned long)dev);","--- initial
+++ final
@@ -49,13 +49,11 @@
   mutex_init(&dev->mfc_mutex);
   init_waitqueue_head(&dev->queue);
   dev->hw_lock = 0;
   INIT_WORK(&dev->watchdog_work, s5p_mfc_watchdog_worker);
   atomic_set(&dev->watchdog_cnt, 0);
-  init_timer(&dev->watchdog_timer);
-  dev->watchdog_timer.data = (unsigned long)dev;
-  dev->watchdog_timer.function = s5p_mfc_watchdog;
+  setup_timer(&dev->watchdog_timer, s5p_mfc_watchdog, (unsigned long)dev);
   ret = v4l2_device_register(&pdev->dev, &dev->v4l2_dev);
   if (ret)
     goto err_v4l2_dev_reg;
 
   vfd = video_device_alloc();",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./kees_timer1,sp_out.final.claude.cocci,1508184939_2017-10-16_b9eaf1872222_st-nci_se_st_nci_se_init,out,1,True,"-  init_timer(&info->se_info.bwi_timer);
-  info->se_info.bwi_timer.data = (unsigned long)info;
-  info->se_info.bwi_timer.function = st_nci_se_wt_timeout;
-  init_timer(&info->se_info.se_active_timer);
-  info->se_info.se_active_timer.data = (unsigned long)info;
-  info->se_info.se_active_timer.function = st_nci_se_activation_timeout;
+  setup_timer(&info->se_info.bwi_timer, st_nci_se_wt_timeout, (unsigned long)info);
+  setup_timer(&info->se_info.se_active_timer, st_nci_se_activation_timeout, (unsigned long)info);","-  init_timer(&info->se_info.bwi_timer);
-  info->se_info.bwi_timer.data = (unsigned long)info;
-  info->se_info.bwi_timer.function = st_nci_se_wt_timeout;
-  init_timer(&info->se_info.se_active_timer);
-  info->se_info.se_active_timer.data = (unsigned long)info;
-  info->se_info.se_active_timer.function = st_nci_se_activation_timeout;
+  setup_timer(&info->se_info.bwi_timer, st_nci_se_wt_timeout, (unsigned long)info);
+  setup_timer(&info->se_info.se_active_timer, st_nci_se_activation_timeout, (unsigned long)info);","--- initial
+++ final
@@ -1,17 +1,13 @@
 int st_nci_se_init(struct nci_dev *ndev, struct st_nci_se_status *se_status)
 {
   struct st_nci_info *info = nci_get_drvdata(ndev);
   init_completion(&info->se_info.req_completion);
 
-  init_timer(&info->se_info.bwi_timer);
-  info->se_info.bwi_timer.data = (unsigned long)info;
-  info->se_info.bwi_timer.function = st_nci_se_wt_timeout;
+  setup_timer(&info->se_info.bwi_timer, st_nci_se_wt_timeout, (unsigned long)info);
   info->se_info.bwi_active = false;
-  init_timer(&info->se_info.se_active_timer);
-  info->se_info.se_active_timer.data = (unsigned long)info;
-  info->se_info.se_active_timer.function = st_nci_se_activation_timeout;
+  setup_timer(&info->se_info.se_active_timer, st_nci_se_activation_timeout, (unsigned long)info);
   info->se_info.se_active = false;
   info->se_info.xch_error = false;
   info->se_info.wt_timeout = ST_NCI_BWI_TO_TIMEOUT(ST_NCI_ATR_DEFAULT_BWI);
   info->se_info.se_status = se_status;
   return 0;",1.0,1.0,./kees_timer1/sp_out.final.claude.cocci,1.0,"@@
expression timer;
expression E1, E2;
@@
-init_timer(&timer);
-timer.data = (unsigned long)E1;
-timer.function = E2;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = (unsigned long)E1;
+setup_timer(&timer, E2, (unsigned long)E1);
@@
expression timer;
expression E2;
@@
-init_timer(&timer);
-timer.function = E2;
-timer.data = 0UL;
+setup_timer(&timer, E2, 0UL);


"
./dma_pool_alloc-52,sp_out.final.claude.cocci,1520514717_2018-03-08_8b1bb6dcba76_ipr_ipr_alloc_cmd_blks,out,1,True,"-      ipr_cmd = dma_pool_alloc(ioa_cfg->ipr_cmd_pool, GFP_KERNEL, &dma_addr);
-      memset(ipr_cmd, 0, sizeof(*ipr_cmd));
+      ipr_cmd = dma_pool_zalloc(ioa_cfg->ipr_cmd_pool, GFP_KERNEL, &dma_addr);","-      ipr_cmd = dma_pool_alloc(ioa_cfg->ipr_cmd_pool, GFP_KERNEL, &dma_addr);
-      memset(ipr_cmd, 0, sizeof(*ipr_cmd));
+      ipr_cmd = dma_pool_zalloc(ioa_cfg->ipr_cmd_pool, GFP_KERNEL, &dma_addr);","--- initial
+++ final
@@ -46,17 +46,16 @@
       ioa_cfg->hrrq[ioa_cfg->hrrq_num - 1].size += i;
       ioa_cfg->hrrq[ioa_cfg->hrrq_num - 1].max_cmd_id += i;
     }
   for (i = 0; i < IPR_NUM_CMD_BLKS; i++)
     {
-      ipr_cmd = dma_pool_alloc(ioa_cfg->ipr_cmd_pool, GFP_KERNEL, &dma_addr);
+      ipr_cmd = dma_pool_zalloc(ioa_cfg->ipr_cmd_pool, GFP_KERNEL, &dma_addr);
       if (!ipr_cmd)
         {
           ipr_free_cmd_blks(ioa_cfg);
           return -ENOMEM;
         }
-      memset(ipr_cmd, 0, sizeof(*ipr_cmd));
       ioa_cfg->ipr_cmnd_list[i] = ipr_cmd;
       ioa_cfg->ipr_cmnd_list_dma[i] = dma_addr;
       ioarcb = &ipr_cmd->ioarcb;
       ipr_cmd->dma_addr = dma_addr;
       if (ioa_cfg->sis64)",1.0,1.0,./dma_pool_alloc-52/sp_out.final.claude.cocci,1.0,"@@
expression pool, flags, dma;
expression ptr;
expression size;
@@
- ptr = dma_pool_alloc(pool, flags, dma);
+ ptr = dma_pool_zalloc(pool, flags, dma);
  ...
- memset(ptr, 0, size);


"
./dma_pool_alloc-52,sp_out.final.claude.cocci,1518639038_2018-02-15_501017f6d4e1_qla_iocb_qla82xx_start_scsi,out,1,True,"-      ctx->fcp_cmnd = dma_pool_alloc(ha->fcp_cmnd_dma_pool, GFP_ATOMIC, &ctx->fcp_cmnd_dma);
-      memset(ctx->fcp_cmnd, 0, sizeof(struct fcp_cmnd));
+      ctx->fcp_cmnd = dma_pool_zalloc(ha->fcp_cmnd_dma_pool, GFP_ATOMIC, &ctx->fcp_cmnd_dma);","-      ctx->fcp_cmnd = dma_pool_alloc(ha->fcp_cmnd_dma_pool, GFP_ATOMIC, &ctx->fcp_cmnd_dma);
-      memset(ctx->fcp_cmnd, 0, sizeof(struct fcp_cmnd));
+      ctx->fcp_cmnd = dma_pool_zalloc(ha->fcp_cmnd_dma_pool, GFP_ATOMIC, &ctx->fcp_cmnd_dma);","--- initial
+++ final
@@ -121,11 +121,11 @@
         {
           ql_log(ql_log_fatal, vha, 0x3010, ""Failed to allocate ctx for cmd=%p.\n"", cmd);
           goto queuing_error;
         }
       memset(ctx, 0, sizeof(struct ct6_dsd));
-      ctx->fcp_cmnd = dma_pool_alloc(ha->fcp_cmnd_dma_pool, GFP_ATOMIC, &ctx->fcp_cmnd_dma);
+      ctx->fcp_cmnd = dma_pool_zalloc(ha->fcp_cmnd_dma_pool, GFP_ATOMIC, &ctx->fcp_cmnd_dma);
       if (!ctx->fcp_cmnd)
         {
           ql_log(ql_log_fatal, vha, 0x3011, ""Failed to allocate fcp_cmnd for cmd=%p.\n"", cmd);
           goto queuing_error;
         }
@@ -170,11 +170,10 @@
       if (qla24xx_build_scsi_type_6_iocbs(sp, cmd_pkt, tot_dsds))
         goto queuing_error_fcp_cmnd;
       int_to_scsilun(cmd->device->lun, &cmd_pkt->lun);
       host_to_fcp_swap((uint8_t *)&cmd_pkt->lun, sizeof(cmd_pkt->lun));
 
-      memset(ctx->fcp_cmnd, 0, sizeof(struct fcp_cmnd));
       int_to_scsilun(cmd->device->lun, &ctx->fcp_cmnd->lun);
       ctx->fcp_cmnd->additional_cdb_len = additional_cdb_len;
       if (cmd->sc_data_direction == DMA_TO_DEVICE)
         ctx->fcp_cmnd->additional_cdb_len |= 1;
       else if (cmd->sc_data_direction == DMA_FROM_DEVICE)",1.0,1.0,./dma_pool_alloc-52/sp_out.final.claude.cocci,1.0,"@@
expression pool, flags, dma;
expression ptr;
expression size;
@@
- ptr = dma_pool_alloc(pool, flags, dma);
+ ptr = dma_pool_zalloc(pool, flags, dma);
  ...
- memset(ptr, 0, size);


"
./dma_pool_alloc-52,sp_out.final.claude.cocci,1518634820_2018-02-15_8d35a9dc4244_ql4_os_qla4xxx_delete_chap,out,1,True,"-  chap_table = dma_pool_alloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
-  memset(chap_table, 0, sizeof(struct ql4_chap_table));
+  chap_table = dma_pool_zalloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);","-  chap_table = dma_pool_alloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
-  memset(chap_table, 0, sizeof(struct ql4_chap_table));
+  chap_table = dma_pool_zalloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);","--- initial
+++ final
@@ -5,14 +5,13 @@
   dma_addr_t chap_dma;
   int max_chap_entries = 0;
   uint32_t offset = 0;
   uint32_t chap_size;
   int ret = 0;
-  chap_table = dma_pool_alloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
+  chap_table = dma_pool_zalloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
   if (chap_table == NULL)
     return -ENOMEM;
-  memset(chap_table, 0, sizeof(struct ql4_chap_table));
   if (is_qla80XX(ha))
     max_chap_entries = (ha->hw.flt_chap_size / 2) / sizeof(struct ql4_chap_table);
   else
     max_chap_entries = MAX_CHAP_ENTRIES_40XX;
   if (chap_tbl_idx > max_chap_entries)",1.0,1.0,./dma_pool_alloc-52/sp_out.final.claude.cocci,1.0,"@@
expression pool, flags, dma;
expression ptr;
expression size;
@@
- ptr = dma_pool_alloc(pool, flags, dma);
+ ptr = dma_pool_zalloc(pool, flags, dma);
  ...
- memset(ptr, 0, size);


"
./dma_pool_alloc-52,sp_out.final.claude.cocci,1518711906_2018-02-15_61b142afb2e2_megaraid_sas_base_megasas_create_frame_pool,out,1,True,"-      cmd->frame = dma_pool_alloc(instance->frame_dma_pool, GFP_KERNEL, &cmd->frame_phys_addr);
-      memset(cmd->frame, 0, instance->mfi_frame_size);
+      cmd->frame = dma_pool_zalloc(instance->frame_dma_pool, GFP_KERNEL, &cmd->frame_phys_addr);","-      cmd->frame = dma_pool_alloc(instance->frame_dma_pool, GFP_KERNEL, &cmd->frame_phys_addr);
-      memset(cmd->frame, 0, instance->mfi_frame_size);
+      cmd->frame = dma_pool_zalloc(instance->frame_dma_pool, GFP_KERNEL, &cmd->frame_phys_addr);","--- initial
+++ final
@@ -30,20 +30,19 @@
     }
 
   for (i = 0; i < max_cmd; i++)
     {
       cmd = instance->cmd_list[i];
-      cmd->frame = dma_pool_alloc(instance->frame_dma_pool, GFP_KERNEL, &cmd->frame_phys_addr);
+      cmd->frame = dma_pool_zalloc(instance->frame_dma_pool, GFP_KERNEL, &cmd->frame_phys_addr);
       cmd->sense = dma_pool_alloc(instance->sense_dma_pool, GFP_KERNEL, &cmd->sense_phys_addr);
 
       if (!cmd->frame || !cmd->sense)
         {
           dev_printk(KERN_DEBUG, &instance->pdev->dev, ""dma_pool_alloc failed\n"");
           megasas_teardown_frame_pool(instance);
           return -ENOMEM;
         }
-      memset(cmd->frame, 0, instance->mfi_frame_size);
       cmd->frame->io.context = cpu_to_le32(cmd->index);
       cmd->frame->io.pad_0 = 0;
       if ((instance->adapter_type == MFI_SERIES) && reset_devices)
         cmd->frame->hdr.cmd = MFI_CMD_INVALID;
     }",1.0,1.0,./dma_pool_alloc-52/sp_out.final.claude.cocci,1.0,"@@
expression pool, flags, dma;
expression ptr;
expression size;
@@
- ptr = dma_pool_alloc(pool, flags, dma);
+ ptr = dma_pool_zalloc(pool, flags, dma);
  ...
- memset(ptr, 0, size);


"
./dma_pool_alloc-52,sp_out.final.claude.cocci,1518860473_2018-02-17_6de84023d31b_bcm-flexrm-mailbox_flexrm_startup,out,1,True,"-  ring->cmpl_base = dma_pool_alloc(ring->mbox->cmpl_pool, GFP_KERNEL, &ring->cmpl_dma_base);
-  memset(ring->cmpl_base, 0, RING_CMPL_SIZE);
+  ring->cmpl_base = dma_pool_zalloc(ring->mbox->cmpl_pool, GFP_KERNEL, &ring->cmpl_dma_base);","-  ring->cmpl_base = dma_pool_alloc(ring->mbox->cmpl_pool, GFP_KERNEL, &ring->cmpl_dma_base);
-  memset(ring->cmpl_base, 0, RING_CMPL_SIZE);
+  ring->cmpl_base = dma_pool_zalloc(ring->mbox->cmpl_pool, GFP_KERNEL, &ring->cmpl_dma_base);","--- initial
+++ final
@@ -25,18 +25,17 @@
       else
         d = flexrm_null_desc(RING_BD_TOGGLE_INVALID(off));
       flexrm_write_desc(ring->bd_base + off, d);
     }
 
-  ring->cmpl_base = dma_pool_alloc(ring->mbox->cmpl_pool, GFP_KERNEL, &ring->cmpl_dma_base);
+  ring->cmpl_base = dma_pool_zalloc(ring->mbox->cmpl_pool, GFP_KERNEL, &ring->cmpl_dma_base);
   if (!ring->cmpl_base)
     {
       dev_err(ring->mbox->dev, ""can't allocate completion memory for ring%d\n"", ring->num);
       ret = -ENOMEM;
       goto fail_free_bd_memory;
     }
-  memset(ring->cmpl_base, 0, RING_CMPL_SIZE);
 
   if (ring->irq == UINT_MAX)
     {
       dev_err(ring->mbox->dev, ""ring%d IRQ not available\n"", ring->num);
       ret = -ENODEV;",1.0,1.0,./dma_pool_alloc-52/sp_out.final.claude.cocci,1.0,"@@
expression pool, flags, dma;
expression ptr;
expression size;
@@
- ptr = dma_pool_alloc(pool, flags, dma);
+ ptr = dma_pool_zalloc(pool, flags, dma);
  ...
- memset(ptr, 0, size);


"
./dma_pool_alloc-52,sp_out.final.claude.cocci,1518634820_2018-02-15_8d35a9dc4244_ql4_mbx_qla4xxx_get_chap,out,1,True,"-  chap_table = dma_pool_alloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
-  memset(chap_table, 0, chap_size);
+  chap_table = dma_pool_zalloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);","-  chap_table = dma_pool_alloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
-  memset(chap_table, 0, chap_size);
+  chap_table = dma_pool_zalloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);","--- initial
+++ final
@@ -3,15 +3,14 @@
   int ret = 0;
   int rval = QLA_ERROR;
   uint32_t offset = 0, chap_size;
   struct ql4_chap_table *chap_table;
   dma_addr_t chap_dma;
-  chap_table = dma_pool_alloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
+  chap_table = dma_pool_zalloc(ha->chap_dma_pool, GFP_KERNEL, &chap_dma);
   if (chap_table == NULL)
     return -ENOMEM;
   chap_size = sizeof(struct ql4_chap_table);
-  memset(chap_table, 0, chap_size);
   if (is_qla40XX(ha))
     offset = FLASH_CHAP_OFFSET | (idx * chap_size);
   else
     {
       offset = FLASH_RAW_ACCESS_ADDR + (ha->hw.flt_region_chap << 2);",1.0,1.0,./dma_pool_alloc-52/sp_out.final.claude.cocci,1.0,"@@
expression pool, flags, dma;
expression ptr;
expression size;
@@
- ptr = dma_pool_alloc(pool, flags, dma);
+ ptr = dma_pool_zalloc(pool, flags, dma);
  ...
- memset(ptr, 0, size);


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_smu_smu_init,out,1,True,"-  free_bootmem(__pa(smu), sizeof(struct smu_device));
+  memblock_free(__pa(smu), sizeof(struct smu_device));","-  free_bootmem(__pa(smu), sizeof(struct smu_device));
+  memblock_free(__pa(smu), sizeof(struct smu_device));","--- initial
+++ final
@@ -78,11 +78,11 @@
 fail_msg_node:
   of_node_put(smu->msg_node);
 fail_db_node:
   of_node_put(smu->db_node);
 fail_bootmem:
-  free_bootmem(__pa(smu), sizeof(struct smu_device));
+  memblock_free(__pa(smu), sizeof(struct smu_device));
   smu = NULL;
 fail_np:
   of_node_put(np);
   return ret;
 }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_swiotlb-xen_xen_swiotlb_init,out,1,True,"-        free_bootmem(__pa(xen_io_tlb_start), PAGE_ALIGN(bytes));
+        memblock_free(__pa(xen_io_tlb_start), PAGE_ALIGN(bytes));","-        free_bootmem(__pa(xen_io_tlb_start), PAGE_ALIGN(bytes));
+        memblock_free(__pa(xen_io_tlb_start), PAGE_ALIGN(bytes));","--- initial
+++ final
@@ -38,11 +38,11 @@
 
   rc = xen_swiotlb_fixup(xen_io_tlb_start, bytes, xen_io_tlb_nslabs);
   if (rc)
     {
       if (early)
-        free_bootmem(__pa(xen_io_tlb_start), PAGE_ALIGN(bytes));
+        memblock_free(__pa(xen_io_tlb_start), PAGE_ALIGN(bytes));
       else
         {
           free_pages((unsigned long)xen_io_tlb_start, order);
           xen_io_tlb_start = NULL;
         }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_smp_64_pcpu_free_bootmem,out,1,True,"-static void __init pcpu_free_bootmem(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_free_bootmem(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }","-static void __init pcpu_free_bootmem(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_free_bootmem(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }","--- initial
+++ final
@@ -1 +1 @@
-static void __init pcpu_free_bootmem(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_free_bootmem(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_mem_mem_init,out,1,True,"-  free_bootmem(__pa(brk_end), uml_reserved - brk_end);
+  memblock_free(__pa(brk_end), uml_reserved - brk_end);","-  free_bootmem(__pa(brk_end), uml_reserved - brk_end);
+  memblock_free(__pa(brk_end), uml_reserved - brk_end);","--- initial
+++ final
@@ -3,11 +3,11 @@
 
   memset(empty_zero_page, 0, PAGE_SIZE);
 
   brk_end = (unsigned long)UML_ROUND_UP(sbrk(0));
   map_memory(brk_end, __pa(brk_end), uml_reserved - brk_end, 1, 1, 0);
-  free_bootmem(__pa(brk_end), uml_reserved - brk_end);
+  memblock_free(__pa(brk_end), uml_reserved - brk_end);
   uml_reserved = brk_end;
 
   free_all_bootmem();
   max_low_pfn = totalram_pages;
   max_pfn = totalram_pages;",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_setup_64_pcpu_fc_free,out,1,True,"-static void __init pcpu_fc_free(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_fc_free(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }","-static void __init pcpu_fc_free(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_fc_free(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }","--- initial
+++ final
@@ -1 +1 @@
-static void __init pcpu_fc_free(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_fc_free(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_mm_init_free_memmap,out,1,True,"-    free_bootmem(pg, pgend - pg);
+    memblock_free(pg, pgend - pg);","-    free_bootmem(pg, pgend - pg);
+    memblock_free(pg, pgend - pg);","--- initial
+++ final
@@ -8,7 +8,7 @@
 
   pg = (unsigned long)PAGE_ALIGN(__pa(start_pg));
   pgend = (unsigned long)__pa(end_pg) & PAGE_MASK;
 
   if (pg < pgend)
-    free_bootmem(pg, pgend - pg);
+    memblock_free(pg, pgend - pg);
 }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_setup_percpu_pcpu_fc_free,out,1,True,"-static void __init pcpu_fc_free(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_fc_free(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }","-static void __init pcpu_fc_free(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_fc_free(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }","--- initial
+++ final
@@ -1 +1 @@
-static void __init pcpu_fc_free(void *ptr, size_t size) { free_bootmem(__pa(ptr), size); }
+static void __init pcpu_fc_free(void *ptr, size_t size) { memblock_free(__pa(ptr), size); }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_xhci-dbc_xdbc_init,out,1,True,"-  free_bootmem(xdbc.table_dma, PAGE_SIZE);
-  free_bootmem(xdbc.out_dma, PAGE_SIZE);
+  memblock_free(xdbc.table_dma, PAGE_SIZE);
+  memblock_free(xdbc.out_dma, PAGE_SIZE);","-  free_bootmem(xdbc.table_dma, PAGE_SIZE);
-  free_bootmem(xdbc.out_dma, PAGE_SIZE);
+  memblock_free(xdbc.table_dma, PAGE_SIZE);
+  memblock_free(xdbc.out_dma, PAGE_SIZE);","--- initial
+++ final
@@ -29,11 +29,11 @@
   return 0;
 free_and_quit:
   xdbc_free_ring(&xdbc.evt_ring);
   xdbc_free_ring(&xdbc.out_ring);
   xdbc_free_ring(&xdbc.in_ring);
-  free_bootmem(xdbc.table_dma, PAGE_SIZE);
-  free_bootmem(xdbc.out_dma, PAGE_SIZE);
+  memblock_free(xdbc.table_dma, PAGE_SIZE);
+  memblock_free(xdbc.out_dma, PAGE_SIZE);
   writel(0, &xdbc.xdbc_reg->control);
   early_iounmap(xdbc.xhci_base, xdbc.xhci_length);
   return ret;
 }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_xhci-dbc_early_xdbc_setup_hardware,out,1,True,"-        free_bootmem(xdbc.table_dma, PAGE_SIZE);
-        free_bootmem(xdbc.out_dma, PAGE_SIZE);
+        memblock_free(xdbc.table_dma, PAGE_SIZE);
+        memblock_free(xdbc.out_dma, PAGE_SIZE);","-        free_bootmem(xdbc.table_dma, PAGE_SIZE);
-        free_bootmem(xdbc.out_dma, PAGE_SIZE);
+        memblock_free(xdbc.table_dma, PAGE_SIZE);
+        memblock_free(xdbc.out_dma, PAGE_SIZE);","--- initial
+++ final
@@ -11,13 +11,13 @@
       pr_notice(""failed to setup the connection to host\n"");
       xdbc_free_ring(&xdbc.evt_ring);
       xdbc_free_ring(&xdbc.out_ring);
       xdbc_free_ring(&xdbc.in_ring);
       if (xdbc.table_dma)
-        free_bootmem(xdbc.table_dma, PAGE_SIZE);
+        memblock_free(xdbc.table_dma, PAGE_SIZE);
       if (xdbc.out_dma)
-        free_bootmem(xdbc.out_dma, PAGE_SIZE);
+        memblock_free(xdbc.out_dma, PAGE_SIZE);
       xdbc.table_base = NULL;
       xdbc.out_buf = NULL;
     }
   return ret;
 }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./free_bootmem-77,sp_out.final.claude.cocci,1540937361_2018-10-30_2013288f7238_p2m_free_p2m_page,out,1,True,"-      free_bootmem((unsigned long)p, PAGE_SIZE);
+      memblock_free((unsigned long)p, PAGE_SIZE);","-      free_bootmem((unsigned long)p, PAGE_SIZE);
+      memblock_free((unsigned long)p, PAGE_SIZE);","--- initial
+++ final
@@ -1,9 +1,9 @@
 static void __ref free_p2m_page(void *p)
 {
   if (unlikely(!slab_is_available()))
     {
-      free_bootmem((unsigned long)p, PAGE_SIZE);
+      memblock_free((unsigned long)p, PAGE_SIZE);
       return;
     }
   free_page((unsigned long)p);
 }",1.0,1.0,./free_bootmem-77/sp_out.final.claude.cocci,1.0,"@@
expression E1, E2;
@@
- free_bootmem(E1, E2)
+ memblock_free(E1, E2)


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_en_tc_modify_header_match_supported,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, exts)",,"--- initial
+++ final
@@ -1,22 +1,21 @@
 static bool modify_header_match_supported(struct mlx5_flow_spec *spec, struct tcf_exts *exts)
 {
   const struct tc_action *a;
   bool modify_ip_header;
-  LIST_HEAD(actions);
+  int i;
   u8 htype, ip_proto;
   void *headers_v;
   u16 ethertype;
   int nkeys, i;
   headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, outer_headers);
   ethertype = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ethertype);
 
   if (ethertype != ETH_P_IP && ethertype != ETH_P_IPV6)
     goto out_ok;
   modify_ip_header = false;
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  tcf_exts_for_each_action(i, a, exts)
   {
     if (!is_tcf_pedit(a))
       continue;
     nkeys = tcf_pedit_nkeys(a);
     for (i = 0; i < nkeys; i++)",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_cxgb4_tc_u32_fill_action_fields,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, exts)",,"--- initial
+++ final
@@ -1,16 +1,15 @@
 static int fill_action_fields(struct adapter *adap, struct ch_filter_specification *fs, struct tc_cls_u32_offload *cls)
 {
   unsigned int num_actions = 0;
   const struct tc_action *a;
   struct tcf_exts *exts;
-  LIST_HEAD(actions);
+  int i;
   exts = cls->knode.exts;
   if (!tcf_exts_has_actions(exts))
     return -EINVAL;
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  tcf_exts_for_each_action(i, a, exts)
   {
 
     if (num_actions)
       return -EINVAL;
 ",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_bnxt_tc_bnxt_tc_parse_actions,out,0,False,"-  LIST_HEAD(tc_actions);
-  tcf_exts_to_list(tc_exts, &tc_actions);
-  list_for_each_entry(tc_act, &tc_actions, list)
+  int i;
+  tcf_exts_for_each_action(i, tc_act, tc_exts)",,"--- initial
+++ final
@@ -1,17 +1,16 @@
 static int bnxt_tc_parse_actions(struct bnxt *bp, struct bnxt_tc_actions *actions, struct tcf_exts *tc_exts)
 {
   const struct tc_action *tc_act;
-  LIST_HEAD(tc_actions);
+  int i;
   int rc;
   if (!tcf_exts_has_actions(tc_exts))
     {
       netdev_info(bp->dev, ""no actions"");
       return -EINVAL;
     }
-  tcf_exts_to_list(tc_exts, &tc_actions);
-  list_for_each_entry(tc_act, &tc_actions, list)
+  tcf_exts_for_each_action(i, tc_act, tc_exts)
   {
 
     if (is_tcf_gact_shot(tc_act))
       {
         actions->flags |= BNXT_TC_ACTION_FLAG_DROP;",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_qede_filter_qede_parse_actions,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, exts)",,"--- initial
+++ final
@@ -1,18 +1,17 @@
 static int qede_parse_actions(struct qede_dev *edev, struct tcf_exts *exts)
 {
   int rc = -EINVAL, num_act = 0;
   const struct tc_action *a;
   bool is_drop = false;
-  LIST_HEAD(actions);
+  int i;
   if (!tcf_exts_has_actions(exts))
     {
       DP_NOTICE(edev, ""No tc actions received\n"");
       return rc;
     }
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  tcf_exts_for_each_action(i, a, exts)
   {
     num_act++;
     if (is_tcf_gact_shot(a))
       is_drop = true;
   }",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_en_tc_parse_tc_nic_actions,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, exts)",,"--- initial
+++ final
@@ -1,17 +1,16 @@
 static int parse_tc_nic_actions(struct mlx5e_priv *priv, struct tcf_exts *exts, struct mlx5e_tc_flow_parse_attr *parse_attr, struct mlx5e_tc_flow *flow)
 {
   struct mlx5_nic_flow_attr *attr = flow->nic_attr;
   const struct tc_action *a;
-  LIST_HEAD(actions);
+  int i;
   u32 action = 0;
   int err;
   if (!tcf_exts_has_actions(exts))
     return -EINVAL;
   attr->flow_tag = MLX5_FS_DEFAULT_FLOW_TAG;
-  tcf_exts_to_list(exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  tcf_exts_for_each_action(i, a, exts)
   {
     if (is_tcf_gact_shot(a))
       {
         action |= MLX5_FLOW_CONTEXT_ACTION_DROP;
         if (MLX5_CAP_FLOWTABLE(priv->mdev, flow_table_properties_nic_receive.flow_counter))",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_action_nfp_flower_compile_action,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(flow->exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, flow->exts)",,"--- initial
+++ final
@@ -2,20 +2,19 @@
 {
   int act_len, act_cnt, err, tun_out_cnt, out_cnt;
   enum nfp_flower_tun_type tun_type;
   const struct tc_action *a;
   u32 csum_updated = 0;
-  LIST_HEAD(actions);
+  int i;
   memset(nfp_flow->action_data, 0, NFP_FL_MAX_A_SIZ);
   nfp_flow->meta.act_len = 0;
   tun_type = NFP_FL_TUNNEL_NONE;
   act_len = 0;
   act_cnt = 0;
   tun_out_cnt = 0;
   out_cnt = 0;
-  tcf_exts_to_list(flow->exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  tcf_exts_for_each_action(i, a, flow->exts)
   {
     err = nfp_flower_loop_action(app, a, flow, nfp_flow, &act_len, netdev, &tun_type, &tun_out_cnt, &out_cnt, &csum_updated);
     if (err)
       return err;
     act_cnt++;",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_cxgb4_tc_flower_cxgb4_validate_flow_actions,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(cls->exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, cls->exts)",,"--- initial
+++ final
@@ -2,13 +2,12 @@
 {
   const struct tc_action *a;
   bool act_redir = false;
   bool act_pedit = false;
   bool act_vlan = false;
-  LIST_HEAD(actions);
-  tcf_exts_to_list(cls->exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, cls->exts)
   {
     if (is_tcf_gact_ok(a))
       {
       }
     else if (is_tcf_gact_shot(a))",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./tcaction,sp_out.final.claude.cocci,1534706529_2018-08-19_244cd96adb5f_cxgb4_tc_flower_cxgb4_process_flow_actions,out,0,False,"-  LIST_HEAD(actions);
-  tcf_exts_to_list(cls->exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, cls->exts)",,"--- initial
+++ final
@@ -1,11 +1,10 @@
 static void cxgb4_process_flow_actions(struct net_device *in, struct tc_cls_flower_offload *cls, struct ch_filter_specification *fs)
 {
   const struct tc_action *a;
-  LIST_HEAD(actions);
-  tcf_exts_to_list(cls->exts, &actions);
-  list_for_each_entry(a, &actions, list)
+  int i;
+  tcf_exts_for_each_action(i, a, cls->exts)
   {
     if (is_tcf_gact_ok(a))
       {
         fs->action = FILTER_PASS;
       }",0.0,0.0,./tcaction/sp_out.final.claude.cocci,0.0,"@@
expression exts, a;
identifier actions;
@@
- LIST_HEAD(actions);
+ int i;
  ...
- tcf_exts_to_list(exts, &actions);
- list_for_each_entry(a, &actions, list)
+ tcf_exts_for_each_action(i, a, exts)
  {
    ...
  }


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_snid,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_snid_data), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_snid_data), device, NULL);",,"--- initial
+++ final
@@ -8,11 +8,11 @@
   if (!capable(CAP_SYS_ADMIN))
     return -EACCES;
   if (copy_from_user(&usrparm, argp, sizeof(usrparm)))
     return -EFAULT;
   useglobal = 0;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_snid_data), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_snid_data), device, NULL);
   if (IS_ERR(cqr))
     {
       mutex_lock(&dasd_reserve_mutex);
       useglobal = 1;
       cqr = &dasd_reserve_req->cqr;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_read_conf_lpm,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 0, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 0, device, NULL);",,"--- initial
+++ final
@@ -15,11 +15,11 @@
   if (!rcd_buf)
     {
       ret = -ENOMEM;
       goto out_error;
     }
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 0, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 0, device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_DEV_EVENT(DBF_WARNING, device, ""%s"", ""Could not allocate RCD request"");
       ret = -ENOMEM;
       goto out_error;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_reserve,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device, NULL);",,"--- initial
+++ final
@@ -5,11 +5,11 @@
   struct ccw1 *ccw;
   int useglobal;
   if (!capable(CAP_SYS_ADMIN))
     return -EACCES;
   useglobal = 0;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device, NULL);
   if (IS_ERR(cqr))
     {
       mutex_lock(&dasd_reserve_mutex);
       useglobal = 1;
       cqr = &dasd_reserve_req->cqr;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_release,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device, NULL);",,"--- initial
+++ final
@@ -5,11 +5,11 @@
   struct ccw1 *ccw;
   int useglobal;
   if (!capable(CAP_SYS_ADMIN))
     return -EACCES;
   useglobal = 0;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, 32, device, NULL);
   if (IS_ERR(cqr))
     {
       mutex_lock(&dasd_reserve_mutex);
       useglobal = 1;
       cqr = &dasd_reserve_req->cqr;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_check,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, NULL);",,"--- initial
+++ final
@@ -27,11 +27,11 @@
     {
       cplength = 2;
       datasize = sizeof(struct DE_eckd_data) + sizeof(struct LO_eckd_data);
     }
   cplength += count;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, NULL);
   if (IS_ERR(cqr))
     return cqr;
   start_priv->count++;
   data = cqr->data;
   ccw = cqr->cpaddr;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_cp_cmd_single,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, blk_mq_rq_to_pdu(req));",,"--- initial
+++ final
@@ -61,11 +61,11 @@
         count = 2 * blk_per_trk - first_rec;
       cplength += count;
       datasize += count * sizeof(struct LO_eckd_data);
     }
 
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, blk_mq_rq_to_pdu(req));
   if (IS_ERR(cqr))
     return cqr;
   ccw = cqr->cpaddr;
 
   if (use_prefix)",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_read_features,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_features)), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_features)), device, NULL);",,"--- initial
+++ final
@@ -5,11 +5,11 @@
   struct dasd_rssd_features *features;
   struct dasd_ccw_req *cqr;
   struct ccw1 *ccw;
   int rc;
   memset(&private->features, 0, sizeof(struct dasd_rssd_features));
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_features)), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_features)), device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_EVENT_DEVID(DBF_WARNING,
                       device->cdev,
                       ""%s"",",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_cp_tpm_track,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev, blk_mq_rq_to_pdu(req));",,"--- initial
+++ final
@@ -38,11 +38,11 @@
   rq_for_each_segment(bv, req, iter) { ++ctidaw; }
   if (rq_data_dir(req) == WRITE)
     ctidaw += (last_trk - first_trk);
 
   itcw_size = itcw_calc_size(0, ctidaw, 0);
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev, blk_mq_rq_to_pdu(req));
   if (IS_ERR(cqr))
     return cqr;
 
   if (first_trk == last_trk)
     tlf = last_offs - first_offs + 1;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_cp_raw,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, blk_mq_rq_to_pdu(req));",,"--- initial
+++ final
@@ -54,11 +54,11 @@
       size = sizeof(struct DE_eckd_data) + sizeof(struct LRE_eckd_data) + 2;
     }
   size = ALIGN(size, 8);
   datasize = size + cidaw * sizeof(unsigned long);
 
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, blk_mq_rq_to_pdu(req));
   if (IS_ERR(cqr))
     return cqr;
   ccw = cqr->cpaddr;
   data = cqr->data;
   if (use_prefix)",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_performance,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_perf_stats_t)), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_perf_stats_t)), device, NULL);",,"--- initial
+++ final
@@ -3,11 +3,11 @@
   struct dasd_psf_prssd_data *prssdp;
   struct dasd_rssd_perf_stats_t *stats;
   struct dasd_ccw_req *cqr;
   struct ccw1 *ccw;
   int rc;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_perf_stats_t)), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_perf_stats_t)), device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_DEV_EVENT(DBF_WARNING, device, ""%s"", ""Could not allocate initialization request"");
       return PTR_ERR(cqr);
     }",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_query_host_access,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, sizeof(struct dasd_psf_prssd_data) + 1, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, sizeof(struct dasd_psf_prssd_data) + 1, device, NULL);",,"--- initial
+++ final
@@ -10,11 +10,11 @@
   if (!device->block && private->lcu->pav == HYPER_PAV)
     return -EOPNOTSUPP;
 
   if (!(private->features.feature[14] & 0x80))
     return -EOPNOTSUPP;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, sizeof(struct dasd_psf_prssd_data) + 1, device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, sizeof(struct dasd_psf_prssd_data) + 1, device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_EVENT_DEVID(DBF_WARNING, device->cdev, ""%s"", ""Could not allocate read message buffer request"");
       return PTR_ERR(cqr);
     }",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_format,out,0,False,"-  fcp = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  fcp = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, NULL);",,"--- initial
+++ final
@@ -64,11 +64,11 @@
     default:
       dev_warn(&startdev->cdev->dev, ""An I/O control call used incorrect flags 0x%x\n"", fdata->intensity);
       return ERR_PTR(-EINVAL);
     }
 
-  fcp = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  fcp = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, NULL);
   if (IS_ERR(fcp))
     return fcp;
   start_priv->count++;
   data = fcp->data;
   ccw = fcp->cpaddr;",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_read_message_buffer,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_messages)), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_messages)), device, NULL);",,"--- initial
+++ final
@@ -3,11 +3,11 @@
   struct dasd_rssd_messages *message_buf;
   struct dasd_psf_prssd_data *prssdp;
   struct dasd_ccw_req *cqr;
   struct ccw1 *ccw;
   int rc;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_messages)), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1 + 1, (sizeof(struct dasd_psf_prssd_data) + sizeof(struct dasd_rssd_messages)), device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_EVENT_DEVID(DBF_WARNING, device->cdev, ""%s"", ""Could not allocate read message buffer request"");
       return PTR_ERR(cqr);
     }",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_psf_ssc,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_ssc_data), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_ssc_data), device, NULL);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 static struct dasd_ccw_req *dasd_eckd_build_psf_ssc(struct dasd_device *device, int enable_pav)
 {
   struct dasd_ccw_req *cqr;
   struct dasd_psf_ssc_data *psf_ssc_data;
   struct ccw1 *ccw;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_ssc_data), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_ssc_data), device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_DEV_EVENT(DBF_WARNING, device, ""%s"", ""Could not allocate PSF-SSC request"");
       return cqr;
     }",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_dasd_generic_build_rdc,out,0,False,"-  cqr = dasd_smalloc_request(magic, 1, rdc_buffer_size, device);
+  cqr = dasd_smalloc_request(magic, 1, rdc_buffer_size, device, NULL);",,"--- initial
+++ final
@@ -1,11 +1,11 @@
 static struct dasd_ccw_req *dasd_generic_build_rdc(struct dasd_device *device, void *rdc_buffer, int rdc_buffer_size, int magic)
 {
   struct dasd_ccw_req *cqr;
   struct ccw1 *ccw;
   unsigned long *idaw;
-  cqr = dasd_smalloc_request(magic, 1, rdc_buffer_size, device);
+  cqr = dasd_smalloc_request(magic, 1, rdc_buffer_size, device, NULL);
   if (IS_ERR(cqr))
     {
 
       dev_err(&device->cdev->dev,
               ""An error occurred in the DASD device driver, """,0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_check_tcw,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev, NULL);",,"--- initial
+++ final
@@ -15,11 +15,11 @@
     startdev = base;
   start_priv = startdev->private;
   count = rpt * (fdata->stop_unit - fdata->start_unit + 1);
 
   itcw_size = itcw_calc_size(0, count, 0);
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 0, itcw_size, startdev, NULL);
   if (IS_ERR(cqr))
     return cqr;
   start_priv->count++;
   itcw = itcw_init(cqr->data, itcw_size, ITCW_OP_READ, 0, count, 0);
   if (IS_ERR(itcw))",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_psf_cuir_response,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_cuir_response), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_cuir_response), device, NULL);",,"--- initial
+++ final
@@ -3,11 +3,11 @@
   struct dasd_psf_cuir_response *psf_cuir;
   int pos = pathmask_to_pos(lpum);
   struct dasd_ccw_req *cqr;
   struct ccw1 *ccw;
   int rc;
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_cuir_response), device);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, 1, sizeof(struct dasd_psf_cuir_response), device, NULL);
   if (IS_ERR(cqr))
     {
       DBF_DEV_EVENT(DBF_WARNING, device, ""%s"", ""Could not allocate PSF-CUIR request"");
       return PTR_ERR(cqr);
     }",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
./dasd_smalloc,sp_out.final.claude.cocci,1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_build_cp_cmd_track,out,0,False,"-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, blk_mq_rq_to_pdu(req));",,"--- initial
+++ final
@@ -28,11 +28,11 @@
   trkcount = last_trk - first_trk + 1;
 
   cplength = 1 + trkcount;
   datasize = sizeof(struct PFX_eckd_data) + cidaw * sizeof(unsigned long);
 
-  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev);
+  cqr = dasd_smalloc_request(DASD_ECKD_MAGIC, cplength, datasize, startdev, blk_mq_rq_to_pdu(req));
   if (IS_ERR(cqr))
     return cqr;
   ccw = cqr->cpaddr;
 
   if (first_trk == last_trk)",0.0,0.0,./dasd_smalloc/sp_out.final.claude.cocci,0.0,"@@
expression magic, cplength, datasize, device;
expression E;
@@
- dasd_smalloc_request(magic, cplength, datasize, device)
+ dasd_smalloc_request(magic, cplength, datasize, device, E)


"
