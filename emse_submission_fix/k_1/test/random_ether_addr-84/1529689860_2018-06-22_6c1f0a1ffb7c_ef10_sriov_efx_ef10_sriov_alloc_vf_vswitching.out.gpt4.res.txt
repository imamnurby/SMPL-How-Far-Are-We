init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./random_ether_addr-84/sp_out.final.gpt4.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
expression E;
@@
- random_ether_addr(E)
+ eth_random_addr(E)



HANDLING: ./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_ef10_sriov_efx_ef10_sriov_alloc_vf_vswitching.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     transformation info returned:
          transform state: 23
               with rule_elem: -random_ether_addr
                                 >>> eth_random_addr(E)
                               -(-E-)
               with binding: [rule starting on line 1.E --> nic_data->vf[i].mac]
     binding out = []
     transform one node: 23
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_ef10_sriov_efx_ef10_sriov_alloc_vf_vswitching.c.sanitized.c
+++ /tmp/cocci-output-93058-7be1e2-1529689860_2018-06-22_6c1f0a1ffb7c_ef10_sriov_efx_ef10_sriov_alloc_vf_vswitching.c.sanitized.c
@@ -8,7 +8,7 @@ static int efx_ef10_sriov_alloc_vf_vswit
     return -ENOMEM;
   for (i = 0; i < efx->vf_count; i++)
     {
-      random_ether_addr(nic_data->vf[i].mac);
+      eth_random_addr(nic_data->vf[i].mac);
       nic_data->vf[i].efx = NULL;
       nic_data->vf[i].vlan = EFX_EF10_NO_VLAN;
       rc = efx_ef10_sriov_assign_vf_vport(efx, i);
Check duplication for 1 files
