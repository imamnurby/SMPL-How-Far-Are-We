init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./dasd_smalloc/final_response_0.spinfer.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
identifier I0, I5, I1, I2, I3;
expression E6, E4, E7, E8;
@@
  struct dasd_ccw_req *I0(struct dasd_device *I1, struct dasd_block *I2,                         struct request *I3)  
  {
  ...
- E4 = dasd_smalloc_request(I5, E6, E7, E8); 
+ E4 = dasd_smalloc_request(I5, E6, E7, E8, blk_mq_rq_to_pdu(I3)); 
  ...
  }
// Infered from: (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_regular.{c.sanitized.c,res.c.sanitized.res.c}: dasd_fba_build_cp_regular), (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_discard.{c.sanitized.c,res.c.sanitized.res.c}: dasd_fba_build_cp_discard), (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_diag_dasd_diag_build_cp.{c.sanitized.c,res.c.sanitized.res.c}: dasd_diag_build_cp)
// Recall: 0.17, Precision: 1.00, Matching recall: 1.00

// ---------------------------------------------
@@
identifier I1;
expression E0, E4, E2, E3;
@@
- E0 = dasd_smalloc_request(I1, E2, E3, E4); 
+ E0 = dasd_smalloc_request(DASD_ECKD_MAGIC, E2, E3, E4, NULL); 
// Infered from: (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_symm_io.{c.sanitized.c,res.c.sanitized.res.c}: dasd_symm_io), (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_steal_lock.{c.sanitized.c,res.c.sanitized.res.c}: dasd_eckd_steal_lock), (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_eckd_dasd_eckd_analysis_ccw.{c.sanitized.c,res.c.sanitized.res.c}: dasd_eckd_analysis_ccw)
// False positives: (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_diag_dasd_diag_build_cp.res.c.sanitized.res.c: dasd_diag_build_cp), (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_discard.res.c.sanitized.res.c: dasd_fba_build_cp_discard), (./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_regular.res.c.sanitized.res.c: dasd_fba_build_cp_regular)
// Recall: 0.75, Precision: 0.75, Matching recall: 0.75

// ---------------------------------------------
// Final metrics (for the combined 2 rules):
// -- Edit Location --
// Recall: 1.00, Precision: 1.00
// -- Node Change --
// Recall: 0.83, Precision: 0.83
// -- General --
// Functions fully changed: 4/6(66%)

/*
Functions where the patch produced incorrect changes:
 - ./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_diag_dasd_diag_build_cp.c.sanitized.c: dasd_diag_build_cp
 - ./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_regular.c.sanitized.c: dasd_fba_build_cp_regular
*/

// ---------------------------------------------

HANDLING: ./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_discard.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     (ONCE) USING optional_storage builtin isomorphism
     transformation info returned:
          transform state: 27
               with rule_elem: -E4
                                 >>> E4 = dasd_smalloc_request(I5, E6, E7,
                                                               E8,
                                                               blk_mq_rq_to_pdu(
                                                               I3));
                                -= -dasd_smalloc_request-(-I5-, -E6-, -E7-,
                                                          -E8-)-;
               with binding: [rule starting on line 1.E8 --> memdev;
                             rule starting on line 1.E7 --> datasize;
                             rule starting on line 1.E6 --> cplength;
                             rule starting on line 1.I5 --> id DASD_FBA_MAGIC;
                             rule starting on line 1.E4 --> cqr;
                             rule starting on line 1.I3 --> id req]
     binding out = []
     transform one node: 27
-----------------------------------------------------------------------
rule starting on line 16 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 16 satisfied:
binding in = []
binding relevant in = []
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./dasd_smalloc/1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_discard.c.sanitized.c
+++ /tmp/cocci-output-32347-451466-1528132059_2018-06-04_c5205f2ff2be_dasd_fba_dasd_fba_build_cp_discard.c.sanitized.c
@@ -22,7 +22,8 @@ static struct dasd_ccw_req *dasd_fba_bui
 
   cplength = 1 + 2 * nr_ccws;
   datasize = sizeof(struct DE_fba_data) + nr_ccws * (sizeof(struct LO_fba_data) + sizeof(struct ccw1));
-  cqr = dasd_smalloc_request(DASD_FBA_MAGIC, cplength, datasize, memdev);
+  cqr = dasd_smalloc_request(DASD_FBA_MAGIC, cplength, datasize, memdev,
+                             blk_mq_rq_to_pdu(req));
   if (IS_ERR(cqr))
     return cqr;
   ccw = cqr->cpaddr;
Check duplication for 1 files
