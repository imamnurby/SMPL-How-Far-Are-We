init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./EXP0-7/sp_out.final.gpt4.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
identifier root;
@@
- root->objectid
+ root->root_key.objectid



HANDLING: ./EXP0-7/1533533124_2018-08-06_4fd786e6c3d6_backref_iterate_inode_refs.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     transformation info returned:
          transform state: 71
               with rule_elem: -root
                                 >>> root->root_key.objectid
                               -->-objectid
               with binding: [rule starting on line 1.root --> id fs_root]
     binding out = []
     transform one node: 71
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./EXP0-7/1533533124_2018-08-06_4fd786e6c3d6_backref_iterate_inode_refs.c.sanitized.c
+++ /tmp/cocci-output-63959-493c55-1533533124_2018-08-06_4fd786e6c3d6_backref_iterate_inode_refs.c.sanitized.c
@@ -40,7 +40,8 @@ static int iterate_inode_refs(u64 inum,
         {
           name_len = btrfs_inode_ref_name_len(eb, iref);
 
-          btrfs_debug(fs_root->fs_info, "following ref at offset %u for inode %llu in tree %llu", cur, found_key.objectid, fs_root->objectid);
+          btrfs_debug(fs_root->fs_info, "following ref at offset %u for inode %llu in tree %llu", cur, found_key.objectid,
+                      fs_root->root_key.objectid);
           ret = iterate(parent, name_len, (unsigned long)(iref + 1), eb, ctx);
           if (ret)
             break;
Check duplication for 1 files
