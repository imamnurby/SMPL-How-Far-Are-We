init_defs_builtins: /usr/bin/../lib/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: ./random_ether_addr-84/sp_out.final.spinfer.cocci
with isos from: /usr/bin/../lib/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
identifier I1;
expression E0;
@@
- random_ether_addr(E0->I1); 
+ eth_random_addr(E0->I1); 
// Infered from: (./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_qlcnic_sriov_common_qlcnic_sriov_init.{c.sanitized.c,res.c.sanitized.res.c}: qlcnic_sriov_init), (./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_gemini_gemini_ethernet_port_probe.{c.sanitized.c,res.c.sanitized.res.c}: gemini_ethernet_port_probe)
// Recall: 1.00, Precision: 1.00, Matching recall: 1.00

// ---------------------------------------------
// Final metrics (for the combined 1 rules):
// -- Edit Location --
// Recall: 1.00, Precision: 1.00
// -- Node Change --
// Recall: 1.00, Precision: 1.00
// -- General --
// Functions fully changed: 2/2(100%)


// ---------------------------------------------

HANDLING: ./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_netcp_core_netcp_create_interface.c.sanitized.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------
dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
     transformation info returned:
          transform state: 113
               with rule_elem: -random_ether_addr
                                 >>> eth_random_addr(E0->I1);
                               -(-E0-->-I1-)-;
               with binding: [rule starting on line 1.I1 --> id dev_addr;
                             rule starting on line 1.E0 --> ndev]
          transform state: 127
               with rule_elem: -random_ether_addr
                                 >>> eth_random_addr(E0->I1);
                               -(-E0-->-I1-)-;
               with binding: [rule starting on line 1.I1 --> id dev_addr;
                             rule starting on line 1.E0 --> ndev]
     binding out = []
     transform one node: 127
     transform one node: 113
-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
diff = 
--- ./random_ether_addr-84/1529689860_2018-06-22_6c1f0a1ffb7c_netcp_core_netcp_create_interface.c.sanitized.c
+++ /tmp/cocci-output-20343-1de291-1529689860_2018-06-22_6c1f0a1ffb7c_netcp_core_netcp_create_interface.c.sanitized.c
@@ -69,7 +69,7 @@ static int netcp_create_interface(struct
       if (is_valid_ether_addr(efuse_mac_addr))
         ether_addr_copy(ndev->dev_addr, efuse_mac_addr);
       else
-        random_ether_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);
       devm_iounmap(dev, efuse);
       devm_release_mem_region(dev, res.start, size);
     }
@@ -79,7 +79,7 @@ static int netcp_create_interface(struct
       if (mac_addr)
         ether_addr_copy(ndev->dev_addr, mac_addr);
       else
-        random_ether_addr(ndev->dev_addr);
+        eth_random_addr(ndev->dev_addr);
     }
   ret = of_property_read_string(node_interface, "rx-channel", &netcp->dma_chan_name);
   if (ret < 0)
Check duplication for 1 files
